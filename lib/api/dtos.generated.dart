// DTOs autogenerated at 2018-12-26 06:58:33

abstract class GetLocation<T> {
  get path;
  T bodyFromGetJson(dynamic json);
}
abstract class PostBodyLocation<T, U> {
  get path;
  U bodyFromPostJson(dynamic json);
}
abstract class PutBodyLocation<T, U> {
  get path;
  U bodyFromPutJson(dynamic json);
}
/// Fake class to represent more or less just void.
class Unit {
    Unit.fromJson(dynamic json);
}

class InstantWrapper {
  DateTime dateTime;
  InstantWrapper.fromJson(dynamic json): dateTime = DateTime.fromMillisecondsSinceEpoch(json, isUtc: true);
  dynamic toJson() => dateTime.millisecondsSinceEpoch;
}


        enum DevicePlatform { iOS, Android, Unknown}
        DevicePlatform convertDevicePlatformFromJson(String value) {
            switch(value) {
                case 'iOS': return DevicePlatform.iOS;
case 'Android': return DevicePlatform.Android;
case 'Unknown': return DevicePlatform.Unknown;
            }
            throw StateError('illegal value $value for DevicePlatform');
        }
        String convertDevicePlatformToJson(DevicePlatform value) {
            switch(value) {
              case DevicePlatform.iOS: return 'iOS';
case DevicePlatform.Android: return 'Android';
case DevicePlatform.Unknown: return 'Unknown';
            }
            throw StateError('illegal value $value');
        }

        



        enum ImageType { FAVICON, LOGO, LOGO_GUESSED, UNKNOWN, USER_AVATAR}
        ImageType convertImageTypeFromJson(String value) {
            switch(value) {
                case 'FAVICON': return ImageType.FAVICON;
case 'LOGO': return ImageType.LOGO;
case 'LOGO_GUESSED': return ImageType.LOGO_GUESSED;
case 'UNKNOWN': return ImageType.UNKNOWN;
case 'USER_AVATAR': return ImageType.USER_AVATAR;
            }
            throw StateError('illegal value $value for ImageType');
        }
        String convertImageTypeToJson(ImageType value) {
            switch(value) {
              case ImageType.FAVICON: return 'FAVICON';
case ImageType.LOGO: return 'LOGO';
case ImageType.LOGO_GUESSED: return 'LOGO_GUESSED';
case ImageType.UNKNOWN: return 'UNKNOWN';
case ImageType.USER_AVATAR: return 'USER_AVATAR';
            }
            throw StateError('illegal value $value');
        }

        



class GameChallengeDto {
    
    GameChallengeDto(this.challengeId, this.simpleGame);

    String challengeId;
                Iterable<GameSimpleSetResponse> simpleGame;
    

    GameChallengeDto.fromJson(Map<String, dynamic> json)
      : challengeId = json['challengeId'] as String,simpleGame = (json['simpleGame'] as List<dynamic>).map((val) => GameSimpleSetResponse.fromJson(val));

    Map<String, dynamic> toJson() => { 'challengeId': challengeId,'simpleGame': simpleGame.map((val) => val.toJson()).toList() };
}




class GameChallengeInviteCreateRequest {
    
    GameChallengeInviteCreateRequest(this.displayName);

    String displayName;
    

    GameChallengeInviteCreateRequest.fromJson(Map<String, dynamic> json)
      : displayName = json['displayName'] as String;

    Map<String, dynamic> toJson() => { 'displayName': displayName };
}




class GameChallengeInviteInfoAcceptRequest {
    
    

    
    

    
}




class GameChallengeInviteInfoLocation implements GetLocation<GameChallengeInviteInfoResponse>, PutBodyLocation<GameChallengeInviteInfoAcceptRequest, GameChallengeDto> {
    String get path => 'api/game/challenge/invite/{token}'.replaceAll('{token}', this.token);
    GameChallengeInviteInfoLocation(this.token);

    String token;
    GameChallengeInviteInfoResponse bodyFromGetJson(dynamic json) => GameChallengeInviteInfoResponse.fromJson(json as Map<String, dynamic>);
                GameChallengeDto bodyFromPutJson(dynamic json) => GameChallengeDto.fromJson(json as Map<String, dynamic>);

    GameChallengeInviteInfoLocation.fromJson(Map<String, dynamic> json)
      : token = json['token'] as String;

    Map<String, dynamic> toJson() => { 'token': token };
}




class GameChallengeInviteInfoResponse {
    
    GameChallengeInviteInfoResponse(this.createdBy);

    GameUserBaseInfo createdBy;
    

    GameChallengeInviteInfoResponse.fromJson(Map<String, dynamic> json)
      : createdBy = GameUserBaseInfo.fromJson(json['createdBy']);

    Map<String, dynamic> toJson() => { 'createdBy': createdBy.toJson() };
}




class GameChallengeInviteLocation implements PostBodyLocation<GameChallengeInviteCreateRequest, GameChallengeInviteResponse> {
    String get path => 'api/game/challenge/invite';
    

    
    GameChallengeInviteResponse bodyFromPostJson(dynamic json) => GameChallengeInviteResponse.fromJson(json as Map<String, dynamic>);

    
}




class GameChallengeInviteResponse {
    
    GameChallengeInviteResponse(this.inviteToken);

    String inviteToken;
    

    GameChallengeInviteResponse.fromJson(Map<String, dynamic> json)
      : inviteToken = json['inviteToken'] as String;

    Map<String, dynamic> toJson() => { 'inviteToken': inviteToken };
}




class GameSimpleSetGuessDto {
    
    GameSimpleSetGuessDto(this.instrumentKey, this.marketCap);

    String instrumentKey;
                double marketCap;
    

    GameSimpleSetGuessDto.fromJson(Map<String, dynamic> json)
      : instrumentKey = json['instrumentKey'] as String,marketCap = (json['marketCap'] as num).toDouble();

    Map<String, dynamic> toJson() => { 'instrumentKey': instrumentKey,'marketCap': marketCap };
}




class GameSimpleSetLocation implements GetLocation<GameSimpleSetResponse>, PostBodyLocation<GameSimpleSetVerifyRequest, GameSimpleSetVerifyResponse> {
    String get path => 'api/game/simpleGameSet';
    

    
    GameSimpleSetResponse bodyFromGetJson(dynamic json) => GameSimpleSetResponse.fromJson(json as Map<String, dynamic>);
                GameSimpleSetVerifyResponse bodyFromPostJson(dynamic json) => GameSimpleSetVerifyResponse.fromJson(json as Map<String, dynamic>);

    
}




class GameSimpleSetResponse {
    
    GameSimpleSetResponse(this.gameTurnId, this.marketCapScaleMax, this.marketCapScaleMin, this.simpleGame);

    String gameTurnId;
                double marketCapScaleMax;
                double marketCapScaleMin;
                Iterable<SimpleGameDto> simpleGame;
    

    GameSimpleSetResponse.fromJson(Map<String, dynamic> json)
      : gameTurnId = json['gameTurnId'] as String,marketCapScaleMax = (json['marketCapScaleMax'] as num).toDouble(),marketCapScaleMin = (json['marketCapScaleMin'] as num).toDouble(),simpleGame = (json['simpleGame'] as List<dynamic>).map((val) => SimpleGameDto.fromJson(val));

    Map<String, dynamic> toJson() => { 'gameTurnId': gameTurnId,'marketCapScaleMax': marketCapScaleMax,'marketCapScaleMin': marketCapScaleMin,'simpleGame': simpleGame.map((val) => val.toJson()).toList() };
}




class GameSimpleSetVerifyRequest {
    
    GameSimpleSetVerifyRequest(this.gameTurnId, this.guesses);

    String gameTurnId;
                Iterable<GameSimpleSetGuessDto> guesses;
    

    GameSimpleSetVerifyRequest.fromJson(Map<String, dynamic> json)
      : gameTurnId = json['gameTurnId'] as String,guesses = (json['guesses'] as List<dynamic>).map((val) => GameSimpleSetGuessDto.fromJson(val));

    Map<String, dynamic> toJson() => { 'gameTurnId': gameTurnId,'guesses': guesses.map((val) => val.toJson()).toList() };
}




class GameSimpleSetVerifyResponse {
    
    GameSimpleSetVerifyResponse(this.actual, this.correctCount, this.statsCorrectAnswers, this.statsTotalTurns);

    Iterable<GameSimpleSetGuessDto> actual;
                int correctCount;
                int statsCorrectAnswers;
                int statsTotalTurns;
    

    GameSimpleSetVerifyResponse.fromJson(Map<String, dynamic> json)
      : actual = (json['actual'] as List<dynamic>).map((val) => GameSimpleSetGuessDto.fromJson(val)),correctCount = json['correctCount'] as int,statsCorrectAnswers = json['statsCorrectAnswers'] as int,statsTotalTurns = json['statsTotalTurns'] as int;

    Map<String, dynamic> toJson() => { 'actual': actual.map((val) => val.toJson()).toList(),'correctCount': correctCount,'statsCorrectAnswers': statsCorrectAnswers,'statsTotalTurns': statsTotalTurns };
}




class GameUserBaseInfo {
    
    GameUserBaseInfo(this.avatarUrl, this.displayName);

    String avatarUrl;
                String displayName;
    

    GameUserBaseInfo.fromJson(Map<String, dynamic> json)
      : avatarUrl = json['avatarUrl'] as String,displayName = json['displayName'] as String;

    Map<String, dynamic> toJson() => { 'avatarUrl': avatarUrl,'displayName': displayName };
}




class InstrumentImageDto {
    
    InstrumentImageDto(this.fileName, this.height, this.id, this.imageType, this.mimeType, this.width);

    String fileName;
                int height;
                String id;
                ImageType imageType;
                String mimeType;
                int width;
    

    InstrumentImageDto.fromJson(Map<String, dynamic> json)
      : fileName = json['fileName'] as String,height = json['height'] as int,id = json['id'] as String,imageType = convertImageTypeFromJson(json['imageType'] as String),mimeType = json['mimeType'] as String,width = json['width'] as int;

    Map<String, dynamic> toJson() => { 'fileName': fileName,'height': height,'id': id,'imageType': convertImageTypeToJson(imageType),'mimeType': mimeType,'width': width };
}




class LeaderboardEntry {
    
    LeaderboardEntry(this.avatarUrl, this.displayName, this.loggedInUser, this.rank, this.statsCorrectAnswers, this.statsTotalTurns);

    String avatarUrl;
                String displayName;
                bool loggedInUser;
                int rank;
                int statsCorrectAnswers;
                int statsTotalTurns;
    

    LeaderboardEntry.fromJson(Map<String, dynamic> json)
      : avatarUrl = json['avatarUrl'] as String,displayName = json['displayName'] as String,loggedInUser = json['loggedInUser'] as bool,rank = json['rank'] as int,statsCorrectAnswers = json['statsCorrectAnswers'] as int,statsTotalTurns = json['statsTotalTurns'] as int;

    Map<String, dynamic> toJson() => { 'avatarUrl': avatarUrl,'displayName': displayName,'loggedInUser': loggedInUser,'rank': rank,'statsCorrectAnswers': statsCorrectAnswers,'statsTotalTurns': statsTotalTurns };
}




class LeaderboardSimpleLocation implements GetLocation<LeaderboardSimpleResponse> {
    String get path => 'api/game/leaderboard/simple';
    

    
    LeaderboardSimpleResponse bodyFromGetJson(dynamic json) => LeaderboardSimpleResponse.fromJson(json as Map<String, dynamic>);

    
}




class LeaderboardSimpleResponse {
    
    LeaderboardSimpleResponse(this.leaderboardEntries);

    Iterable<LeaderboardEntry> leaderboardEntries;
    

    LeaderboardSimpleResponse.fromJson(Map<String, dynamic> json)
      : leaderboardEntries = (json['leaderboardEntries'] as List<dynamic>).map((val) => LeaderboardEntry.fromJson(val));

    Map<String, dynamic> toJson() => { 'leaderboardEntries': leaderboardEntries.map((val) => val.toJson()).toList() };
}




class RegisterDeviceLocation implements PostBodyLocation<RegisterDeviceRequest, RegisterDeviceResponse> {
    String get path => 'api/game/registerDevice';
    

    
    RegisterDeviceResponse bodyFromPostJson(dynamic json) => RegisterDeviceResponse.fromJson(json as Map<String, dynamic>);

    
}




class RegisterDeviceRequest {
    
    RegisterDeviceRequest(this.deviceInfo, this.osInfo, this.platform);

    String deviceInfo;
                String osInfo;
                DevicePlatform platform;
    

    RegisterDeviceRequest.fromJson(Map<String, dynamic> json)
      : deviceInfo = json['deviceInfo'] as String,osInfo = json['osInfo'] as String,platform = convertDevicePlatformFromJson(json['platform'] as String);

    Map<String, dynamic> toJson() => { 'deviceInfo': deviceInfo,'osInfo': osInfo,'platform': convertDevicePlatformToJson(platform) };
}




class RegisterDeviceResponse {
    
    RegisterDeviceResponse(this.deviceKey, this.userKey);

    String deviceKey;
                String userKey;
    

    RegisterDeviceResponse.fromJson(Map<String, dynamic> json)
      : deviceKey = json['deviceKey'] as String,userKey = json['userKey'] as String;

    Map<String, dynamic> toJson() => { 'deviceKey': deviceKey,'userKey': userKey };
}




class SimpleGameDto {
    
    SimpleGameDto(this.instrumentKey, this.logo);

    String instrumentKey;
                InstrumentImageDto logo;
    

    SimpleGameDto.fromJson(Map<String, dynamic> json)
      : instrumentKey = json['instrumentKey'] as String,logo = InstrumentImageDto.fromJson(json['logo']);

    Map<String, dynamic> toJson() => { 'instrumentKey': instrumentKey,'logo': logo.toJson() };
}




class UserInfoAvatarUpload implements PostBodyLocation<Unit, UserInfoResponse> {
    String get path => 'api/game/userInfo/upload';
    

    
    UserInfoResponse bodyFromPostJson(dynamic json) => UserInfoResponse.fromJson(json as Map<String, dynamic>);

    
}




class UserInfoLocation implements PostBodyLocation<UserInfoRequest, UserInfoResponse> {
    String get path => 'api/game/userInfo';
    

    
    UserInfoResponse bodyFromPostJson(dynamic json) => UserInfoResponse.fromJson(json as Map<String, dynamic>);

    
}




class UserInfoRequest {
    
    UserInfoRequest(this.appVersion, this.deviceInfo, this.fcmToken);

    String appVersion;
                String deviceInfo;
                String fcmToken;
    

    UserInfoRequest.fromJson(Map<String, dynamic> json)
      : appVersion = json['appVersion'] as String,deviceInfo = json['deviceInfo'] as String,fcmToken = json['fcmToken'] as String;

    Map<String, dynamic> toJson() => { 'appVersion': appVersion,'deviceInfo': deviceInfo,'fcmToken': fcmToken };
}




class UserInfoResponse {
    
    UserInfoResponse(this.avatarUrl, this.createdAt, this.displayName, this.email, this.key, this.statsCorrectAnswers, this.statsTotalTurns);

    String avatarUrl;
                InstantWrapper createdAt;
                String displayName;
                String email;
                String key;
                int statsCorrectAnswers;
                int statsTotalTurns;
    

    UserInfoResponse.fromJson(Map<String, dynamic> json)
      : avatarUrl = json['avatarUrl'] as String,createdAt = InstantWrapper.fromJson(json['createdAt']),displayName = json['displayName'] as String,email = json['email'] as String,key = json['key'] as String,statsCorrectAnswers = json['statsCorrectAnswers'] as int,statsTotalTurns = json['statsTotalTurns'] as int;

    Map<String, dynamic> toJson() => { 'avatarUrl': avatarUrl,'createdAt': createdAt.toJson(),'displayName': displayName,'email': email,'key': key,'statsCorrectAnswers': statsCorrectAnswers,'statsTotalTurns': statsTotalTurns };
}




class UserInfoUpdateLocation implements PostBodyLocation<UserInfoUpdateRequest, UserInfoResponse> {
    String get path => 'api/game/userInfo/update';
    

    
    UserInfoResponse bodyFromPostJson(dynamic json) => UserInfoResponse.fromJson(json as Map<String, dynamic>);

    
}




class UserInfoUpdateRequest {
    
    UserInfoUpdateRequest(this.displayName, this.email);

    String displayName;
                String email;
    

    UserInfoUpdateRequest.fromJson(Map<String, dynamic> json)
      : displayName = json['displayName'] as String,email = json['email'] as String;

    Map<String, dynamic> toJson() => { 'displayName': displayName,'email': email };
}

        
