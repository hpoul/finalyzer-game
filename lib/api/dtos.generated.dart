// DTOs autogenerated at 2019-01-25 03:47:38

abstract class GetLocation<T> {
  get path;
  T bodyFromGetJson(dynamic json);
}
abstract class PostBodyLocation<T, U> {
  get path;
  U bodyFromPostJson(dynamic json);
}
abstract class PutBodyLocation<T, U> {
  get path;
  U bodyFromPutJson(dynamic json);
}
/// Fake class to represent more or less just void.
class Unit {
    Unit.fromJson(dynamic json);
}

class InstantWrapper {
  DateTime dateTime;
  InstantWrapper.fromJson(dynamic json): dateTime = DateTime.fromMillisecondsSinceEpoch(json, isUtc: true);
  dynamic toJson() => dateTime.millisecondsSinceEpoch;
}


        enum DescriptionSource { Wikipedia}
        DescriptionSource convertDescriptionSourceFromJson(String value) {
            switch(value) {
                case 'Wikipedia': return DescriptionSource.Wikipedia;
            }
            throw StateError('illegal value $value for DescriptionSource');
        }
        String convertDescriptionSourceToJson(DescriptionSource value) {
            switch(value) {
              case DescriptionSource.Wikipedia: return 'Wikipedia';
            }
            throw StateError('illegal value $value');
        }

        



        enum DevicePlatform { iOS, Android, Unknown}
        DevicePlatform convertDevicePlatformFromJson(String value) {
            switch(value) {
                case 'iOS': return DevicePlatform.iOS;
case 'Android': return DevicePlatform.Android;
case 'Unknown': return DevicePlatform.Unknown;
            }
            throw StateError('illegal value $value for DevicePlatform');
        }
        String convertDevicePlatformToJson(DevicePlatform value) {
            switch(value) {
              case DevicePlatform.iOS: return 'iOS';
case DevicePlatform.Android: return 'Android';
case DevicePlatform.Unknown: return 'Unknown';
            }
            throw StateError('illegal value $value');
        }

        



        enum FirebaseMessagingTopic { All, WeeklyChallenges}
        FirebaseMessagingTopic convertFirebaseMessagingTopicFromJson(String value) {
            switch(value) {
                case 'All': return FirebaseMessagingTopic.All;
case 'WeeklyChallenges': return FirebaseMessagingTopic.WeeklyChallenges;
            }
            throw StateError('illegal value $value for FirebaseMessagingTopic');
        }
        String convertFirebaseMessagingTopicToJson(FirebaseMessagingTopic value) {
            switch(value) {
              case FirebaseMessagingTopic.All: return 'All';
case FirebaseMessagingTopic.WeeklyChallenges: return 'WeeklyChallenges';
            }
            throw StateError('illegal value $value');
        }

        



        enum GameChallengeAction { Start, Retrieve}
        GameChallengeAction convertGameChallengeActionFromJson(String value) {
            switch(value) {
                case 'Start': return GameChallengeAction.Start;
case 'Retrieve': return GameChallengeAction.Retrieve;
            }
            throw StateError('illegal value $value for GameChallengeAction');
        }
        String convertGameChallengeActionToJson(GameChallengeAction value) {
            switch(value) {
              case GameChallengeAction.Start: return 'Start';
case GameChallengeAction.Retrieve: return 'Retrieve';
            }
            throw StateError('illegal value $value');
        }

        



        enum GameChallengeInviteType { LinkInvite, DirectInvite}
        GameChallengeInviteType convertGameChallengeInviteTypeFromJson(String value) {
            switch(value) {
                case 'LinkInvite': return GameChallengeInviteType.LinkInvite;
case 'DirectInvite': return GameChallengeInviteType.DirectInvite;
            }
            throw StateError('illegal value $value for GameChallengeInviteType');
        }
        String convertGameChallengeInviteTypeToJson(GameChallengeInviteType value) {
            switch(value) {
              case GameChallengeInviteType.LinkInvite: return 'LinkInvite';
case GameChallengeInviteType.DirectInvite: return 'DirectInvite';
            }
            throw StateError('illegal value $value');
        }

        



        enum GameChallengeParticipantStatus { Invited, Ready, TurnsCreated, Finished}
        GameChallengeParticipantStatus convertGameChallengeParticipantStatusFromJson(String value) {
            switch(value) {
                case 'Invited': return GameChallengeParticipantStatus.Invited;
case 'Ready': return GameChallengeParticipantStatus.Ready;
case 'TurnsCreated': return GameChallengeParticipantStatus.TurnsCreated;
case 'Finished': return GameChallengeParticipantStatus.Finished;
            }
            throw StateError('illegal value $value for GameChallengeParticipantStatus');
        }
        String convertGameChallengeParticipantStatusToJson(GameChallengeParticipantStatus value) {
            switch(value) {
              case GameChallengeParticipantStatus.Invited: return 'Invited';
case GameChallengeParticipantStatus.Ready: return 'Ready';
case GameChallengeParticipantStatus.TurnsCreated: return 'TurnsCreated';
case GameChallengeParticipantStatus.Finished: return 'Finished';
            }
            throw StateError('illegal value $value');
        }

        



        enum GameChallengeStatus { InvitationSent, Accepted, Finished}
        GameChallengeStatus convertGameChallengeStatusFromJson(String value) {
            switch(value) {
                case 'InvitationSent': return GameChallengeStatus.InvitationSent;
case 'Accepted': return GameChallengeStatus.Accepted;
case 'Finished': return GameChallengeStatus.Finished;
            }
            throw StateError('illegal value $value for GameChallengeStatus');
        }
        String convertGameChallengeStatusToJson(GameChallengeStatus value) {
            switch(value) {
              case GameChallengeStatus.InvitationSent: return 'InvitationSent';
case GameChallengeStatus.Accepted: return 'Accepted';
case GameChallengeStatus.Finished: return 'Finished';
            }
            throw StateError('illegal value $value');
        }

        



        enum GameChallengeType { HeadsUpChallenge, OpenChallenge, WeeklyChallenge}
        GameChallengeType convertGameChallengeTypeFromJson(String value) {
            switch(value) {
                case 'HeadsUpChallenge': return GameChallengeType.HeadsUpChallenge;
case 'OpenChallenge': return GameChallengeType.OpenChallenge;
case 'WeeklyChallenge': return GameChallengeType.WeeklyChallenge;
            }
            throw StateError('illegal value $value for GameChallengeType');
        }
        String convertGameChallengeTypeToJson(GameChallengeType value) {
            switch(value) {
              case GameChallengeType.HeadsUpChallenge: return 'HeadsUpChallenge';
case GameChallengeType.OpenChallenge: return 'OpenChallenge';
case GameChallengeType.WeeklyChallenge: return 'WeeklyChallenge';
            }
            throw StateError('illegal value $value');
        }

        



        enum GameNotificationType { ChallengeInvitationAccepted, ChallengeParticipantFinished, ChallengeInvitation, ChallengeWeekly}
        GameNotificationType convertGameNotificationTypeFromJson(String value) {
            switch(value) {
                case 'ChallengeInvitationAccepted': return GameNotificationType.ChallengeInvitationAccepted;
case 'ChallengeParticipantFinished': return GameNotificationType.ChallengeParticipantFinished;
case 'ChallengeInvitation': return GameNotificationType.ChallengeInvitation;
case 'ChallengeWeekly': return GameNotificationType.ChallengeWeekly;
            }
            throw StateError('illegal value $value for GameNotificationType');
        }
        String convertGameNotificationTypeToJson(GameNotificationType value) {
            switch(value) {
              case GameNotificationType.ChallengeInvitationAccepted: return 'ChallengeInvitationAccepted';
case GameNotificationType.ChallengeParticipantFinished: return 'ChallengeParticipantFinished';
case GameNotificationType.ChallengeInvitation: return 'ChallengeInvitation';
case GameNotificationType.ChallengeWeekly: return 'ChallengeWeekly';
            }
            throw StateError('illegal value $value');
        }

        



        enum ImageType { FAVICON, LOGO, LOGO_GUESSED, UNKNOWN, USER_AVATAR}
        ImageType convertImageTypeFromJson(String value) {
            switch(value) {
                case 'FAVICON': return ImageType.FAVICON;
case 'LOGO': return ImageType.LOGO;
case 'LOGO_GUESSED': return ImageType.LOGO_GUESSED;
case 'UNKNOWN': return ImageType.UNKNOWN;
case 'USER_AVATAR': return ImageType.USER_AVATAR;
            }
            throw StateError('illegal value $value for ImageType');
        }
        String convertImageTypeToJson(ImageType value) {
            switch(value) {
              case ImageType.FAVICON: return 'FAVICON';
case ImageType.LOGO: return 'LOGO';
case ImageType.LOGO_GUESSED: return 'LOGO_GUESSED';
case ImageType.UNKNOWN: return 'UNKNOWN';
case ImageType.USER_AVATAR: return 'USER_AVATAR';
            }
            throw StateError('illegal value $value');
        }

        



        enum ImportType { DEGIRO, HELLO_BANK, YAHOO, MANUAL, UNKNOWN}
        ImportType convertImportTypeFromJson(String value) {
            switch(value) {
                case 'DEGIRO': return ImportType.DEGIRO;
case 'HELLO_BANK': return ImportType.HELLO_BANK;
case 'YAHOO': return ImportType.YAHOO;
case 'MANUAL': return ImportType.MANUAL;
case 'UNKNOWN': return ImportType.UNKNOWN;
            }
            throw StateError('illegal value $value for ImportType');
        }
        String convertImportTypeToJson(ImportType value) {
            switch(value) {
              case ImportType.DEGIRO: return 'DEGIRO';
case ImportType.HELLO_BANK: return 'HELLO_BANK';
case ImportType.YAHOO: return 'YAHOO';
case ImportType.MANUAL: return 'MANUAL';
case ImportType.UNKNOWN: return 'UNKNOWN';
            }
            throw StateError('illegal value $value');
        }

        



        enum InstrumentType { ETP_MUTUAL_FUND, STOCK, STOCK_GUESSED, ADR, CURRENCY, CRYPTO_CURRENCY, INDEX, FUTURE}
        InstrumentType convertInstrumentTypeFromJson(String value) {
            switch(value) {
                case 'ETP_MUTUAL_FUND': return InstrumentType.ETP_MUTUAL_FUND;
case 'STOCK': return InstrumentType.STOCK;
case 'STOCK_GUESSED': return InstrumentType.STOCK_GUESSED;
case 'ADR': return InstrumentType.ADR;
case 'CURRENCY': return InstrumentType.CURRENCY;
case 'CRYPTO_CURRENCY': return InstrumentType.CRYPTO_CURRENCY;
case 'INDEX': return InstrumentType.INDEX;
case 'FUTURE': return InstrumentType.FUTURE;
            }
            throw StateError('illegal value $value for InstrumentType');
        }
        String convertInstrumentTypeToJson(InstrumentType value) {
            switch(value) {
              case InstrumentType.ETP_MUTUAL_FUND: return 'ETP_MUTUAL_FUND';
case InstrumentType.STOCK: return 'STOCK';
case InstrumentType.STOCK_GUESSED: return 'STOCK_GUESSED';
case InstrumentType.ADR: return 'ADR';
case InstrumentType.CURRENCY: return 'CURRENCY';
case InstrumentType.CRYPTO_CURRENCY: return 'CRYPTO_CURRENCY';
case InstrumentType.INDEX: return 'INDEX';
case InstrumentType.FUTURE: return 'FUTURE';
            }
            throw StateError('illegal value $value');
        }

        



        enum LabelPrivacy { PRIVATE, URL_TOKEN_ACCESS}
        LabelPrivacy convertLabelPrivacyFromJson(String value) {
            switch(value) {
                case 'PRIVATE': return LabelPrivacy.PRIVATE;
case 'URL_TOKEN_ACCESS': return LabelPrivacy.URL_TOKEN_ACCESS;
            }
            throw StateError('illegal value $value for LabelPrivacy');
        }
        String convertLabelPrivacyToJson(LabelPrivacy value) {
            switch(value) {
              case LabelPrivacy.PRIVATE: return 'PRIVATE';
case LabelPrivacy.URL_TOKEN_ACCESS: return 'URL_TOKEN_ACCESS';
            }
            throw StateError('illegal value $value');
        }

        



        enum LabelType { PORTFOLIO}
        LabelType convertLabelTypeFromJson(String value) {
            switch(value) {
                case 'PORTFOLIO': return LabelType.PORTFOLIO;
            }
            throw StateError('illegal value $value for LabelType');
        }
        String convertLabelTypeToJson(LabelType value) {
            switch(value) {
              case LabelType.PORTFOLIO: return 'PORTFOLIO';
            }
            throw StateError('illegal value $value');
        }

        



        enum MoverType { Up, Down}
        MoverType convertMoverTypeFromJson(String value) {
            switch(value) {
                case 'Up': return MoverType.Up;
case 'Down': return MoverType.Down;
            }
            throw StateError('illegal value $value for MoverType');
        }
        String convertMoverTypeToJson(MoverType value) {
            switch(value) {
              case MoverType.Up: return 'Up';
case MoverType.Down: return 'Down';
            }
            throw StateError('illegal value $value');
        }

        



        enum PdInstrumentType { STOCK, CURRENCY, CRYPTO_CURRENCY, ETF, INDEX, FUTURE, UNKNOWN}
        PdInstrumentType convertPdInstrumentTypeFromJson(String value) {
            switch(value) {
                case 'STOCK': return PdInstrumentType.STOCK;
case 'CURRENCY': return PdInstrumentType.CURRENCY;
case 'CRYPTO_CURRENCY': return PdInstrumentType.CRYPTO_CURRENCY;
case 'ETF': return PdInstrumentType.ETF;
case 'INDEX': return PdInstrumentType.INDEX;
case 'FUTURE': return PdInstrumentType.FUTURE;
case 'UNKNOWN': return PdInstrumentType.UNKNOWN;
            }
            throw StateError('illegal value $value for PdInstrumentType');
        }
        String convertPdInstrumentTypeToJson(PdInstrumentType value) {
            switch(value) {
              case PdInstrumentType.STOCK: return 'STOCK';
case PdInstrumentType.CURRENCY: return 'CURRENCY';
case PdInstrumentType.CRYPTO_CURRENCY: return 'CRYPTO_CURRENCY';
case PdInstrumentType.ETF: return 'ETF';
case PdInstrumentType.INDEX: return 'INDEX';
case PdInstrumentType.FUTURE: return 'FUTURE';
case PdInstrumentType.UNKNOWN: return 'UNKNOWN';
            }
            throw StateError('illegal value $value');
        }

        



        enum PermissionType { OWNER, VIEWER}
        PermissionType convertPermissionTypeFromJson(String value) {
            switch(value) {
                case 'OWNER': return PermissionType.OWNER;
case 'VIEWER': return PermissionType.VIEWER;
            }
            throw StateError('illegal value $value for PermissionType');
        }
        String convertPermissionTypeToJson(PermissionType value) {
            switch(value) {
              case PermissionType.OWNER: return 'OWNER';
case PermissionType.VIEWER: return 'VIEWER';
            }
            throw StateError('illegal value $value');
        }

        



        enum StatsType { Low52Weeks, High52Weeks}
        StatsType convertStatsTypeFromJson(String value) {
            switch(value) {
                case 'Low52Weeks': return StatsType.Low52Weeks;
case 'High52Weeks': return StatsType.High52Weeks;
            }
            throw StateError('illegal value $value for StatsType');
        }
        String convertStatsTypeToJson(StatsType value) {
            switch(value) {
              case StatsType.Low52Weeks: return 'Low52Weeks';
case StatsType.High52Weeks: return 'High52Weeks';
            }
            throw StateError('illegal value $value');
        }

        



        enum TransactionType { BUY, SELL}
        TransactionType convertTransactionTypeFromJson(String value) {
            switch(value) {
                case 'BUY': return TransactionType.BUY;
case 'SELL': return TransactionType.SELL;
            }
            throw StateError('illegal value $value for TransactionType');
        }
        String convertTransactionTypeToJson(TransactionType value) {
            switch(value) {
              case TransactionType.BUY: return 'BUY';
case TransactionType.SELL: return 'SELL';
            }
            throw StateError('illegal value $value');
        }

        



        enum TransactionValueType { INSTRUMENT_PRICE, FEE_TRANSACTION, FEE_FOREIGN, TOTAL_VALUE, CURRENCY_CONVERSION_RATE, DIVIDEND}
        TransactionValueType convertTransactionValueTypeFromJson(String value) {
            switch(value) {
                case 'INSTRUMENT_PRICE': return TransactionValueType.INSTRUMENT_PRICE;
case 'FEE_TRANSACTION': return TransactionValueType.FEE_TRANSACTION;
case 'FEE_FOREIGN': return TransactionValueType.FEE_FOREIGN;
case 'TOTAL_VALUE': return TransactionValueType.TOTAL_VALUE;
case 'CURRENCY_CONVERSION_RATE': return TransactionValueType.CURRENCY_CONVERSION_RATE;
case 'DIVIDEND': return TransactionValueType.DIVIDEND;
            }
            throw StateError('illegal value $value for TransactionValueType');
        }
        String convertTransactionValueTypeToJson(TransactionValueType value) {
            switch(value) {
              case TransactionValueType.INSTRUMENT_PRICE: return 'INSTRUMENT_PRICE';
case TransactionValueType.FEE_TRANSACTION: return 'FEE_TRANSACTION';
case TransactionValueType.FEE_FOREIGN: return 'FEE_FOREIGN';
case TransactionValueType.TOTAL_VALUE: return 'TOTAL_VALUE';
case TransactionValueType.CURRENCY_CONVERSION_RATE: return 'CURRENCY_CONVERSION_RATE';
case TransactionValueType.DIVIDEND: return 'DIVIDEND';
            }
            throw StateError('illegal value $value');
        }

        



        enum UserType { UNKNOWN, UNKNOWN_FASTSPRING, FREE, PREMIUM, ADMIN, FRIENDLIES}
        UserType convertUserTypeFromJson(String value) {
            switch(value) {
                case 'UNKNOWN': return UserType.UNKNOWN;
case 'UNKNOWN_FASTSPRING': return UserType.UNKNOWN_FASTSPRING;
case 'FREE': return UserType.FREE;
case 'PREMIUM': return UserType.PREMIUM;
case 'ADMIN': return UserType.ADMIN;
case 'FRIENDLIES': return UserType.FRIENDLIES;
            }
            throw StateError('illegal value $value for UserType');
        }
        String convertUserTypeToJson(UserType value) {
            switch(value) {
              case UserType.UNKNOWN: return 'UNKNOWN';
case UserType.UNKNOWN_FASTSPRING: return 'UNKNOWN_FASTSPRING';
case UserType.FREE: return 'FREE';
case UserType.PREMIUM: return 'PREMIUM';
case UserType.ADMIN: return 'ADMIN';
case UserType.FRIENDLIES: return 'FRIENDLIES';
            }
            throw StateError('illegal value $value');
        }

        



class AppMetricsDto {
    
    AppMetricsDto(this.labelCount, this.lastImportEodStats, this.logEventCount, this.userCount);

    int labelCount;
                dynamic lastImportEodStats;
                int logEventCount;
                int userCount;
    

    AppMetricsDto.fromJson(Map<String, dynamic> json)
      : labelCount = json['labelCount'] as int,lastImportEodStats = json['lastImportEodStats'] as dynamic,logEventCount = json['logEventCount'] as int,userCount = json['userCount'] as int;

    Map<String, dynamic> toJson() => { 'labelCount': labelCount,'lastImportEodStats': lastImportEodStats,'logEventCount': logEventCount,'userCount': userCount };
}




class AuthenticatedTestMethodLocation implements GetLocation<TestMethodGetResponse>, PostBodyLocation<TestMethodPostRequest, TestMethodPostResponse>, PutBodyLocation<TestMethodPutRequest, TestMethodPutResponse> {
    String get path => 'api/test/auth/method/{authParam}'.replaceAll('{authParam}', this.authParam);
    AuthenticatedTestMethodLocation(this.authParam);

    String authParam;
    TestMethodGetResponse bodyFromGetJson(dynamic json) =>  TestMethodGetResponse.fromJson(json);
                TestMethodPostResponse bodyFromPostJson(dynamic json) =>  TestMethodPostResponse.fromJson(json);
                TestMethodPutResponse bodyFromPutJson(dynamic json) =>  TestMethodPutResponse.fromJson(json);

    AuthenticatedTestMethodLocation.fromJson(Map<String, dynamic> json)
      : authParam = json['authParam'] as String;

    Map<String, dynamic> toJson() => { 'authParam': authParam };
}




class BiggestMover {
    
    BiggestMover(this.compareValue, this.instrument, this.value);

    double compareValue;
                PdInstrumentDto instrument;
                double value;
    

    BiggestMover.fromJson(Map<String, dynamic> json)
      : compareValue = (json['compareValue'] as num).toDouble(),instrument =  PdInstrumentDto.fromJson(json['instrument']),value = (json['value'] as num).toDouble();

    Map<String, dynamic> toJson() => { 'compareValue': compareValue,'instrument': instrument.toJson(),'value': value };
}




class BiggestMovers implements GetLocation<BiggestMoversResponse> {
    String get path => Uri.parse('api/pricedata/biggestMovers').replace(queryParameters: {'endDate': endDate?.toString(),'startDate': startDate?.toString(),'type': type,}).toString();
    BiggestMovers(this.endDate, this.startDate, this.type);

    /* yyyy-mm-dd date LocalDate */String endDate;
                /* yyyy-mm-dd date LocalDate */String startDate;
                MoverType type;
    BiggestMoversResponse bodyFromGetJson(dynamic json) =>  BiggestMoversResponse.fromJson(json);

    BiggestMovers.fromJson(Map<String, dynamic> json)
      : endDate = json['endDate'] as /* yyyy-mm-dd date LocalDate */String,startDate = json['startDate'] as /* yyyy-mm-dd date LocalDate */String,type = convertMoverTypeFromJson(json['type'] as String);

    Map<String, dynamic> toJson() => { 'endDate': endDate,'startDate': startDate,'type': convertMoverTypeToJson(type) };
}




class BiggestMoversResponse {
    
    BiggestMoversResponse(this.biggestMovers);

    List<BiggestMover> biggestMovers;
    

    BiggestMoversResponse.fromJson(Map<String, dynamic> json)
      : biggestMovers = (json['biggestMovers'] as List<dynamic>).map((val) =>  BiggestMover.fromJson(val)).toList();

    Map<String, dynamic> toJson() => { 'biggestMovers': biggestMovers.map((val) => val.toJson()).toList() };
}




class CompanyInfoDescription {
    
    CompanyInfoDescription(this.content, this.source, this.sourceUrl);

    String content;
                DescriptionSource source;
                String sourceUrl;
    

    CompanyInfoDescription.fromJson(Map<String, dynamic> json)
      : content = json['content'] as String,source = convertDescriptionSourceFromJson(json['source'] as String),sourceUrl = json['sourceUrl'] as String;

    Map<String, dynamic> toJson() => { 'content': content,'source': convertDescriptionSourceToJson(source),'sourceUrl': sourceUrl };
}




class CompanyInfoDetails {
    
    CompanyInfoDetails(this.description, this.extractText, this.instrumentKey, this.name, this.symbol, this.website, this.wikipediaArticleUri);

    String description;
                CompanyInfoDescription extractText;
                String instrumentKey;
                String name;
                String symbol;
                String website;
                String wikipediaArticleUri;
    

    CompanyInfoDetails.fromJson(Map<String, dynamic> json)
      : description = json['description'] as String,extractText = json['extractText'] == null ? null :  CompanyInfoDescription.fromJson(json['extractText']),instrumentKey = json['instrumentKey'] as String,name = json['name'] as String,symbol = json['symbol'] as String,website = json['website'] as String,wikipediaArticleUri = json['wikipediaArticleUri'] as String;

    Map<String, dynamic> toJson() => { 'description': description,'extractText': extractText.toJson(),'instrumentKey': instrumentKey,'name': name,'symbol': symbol,'website': website,'wikipediaArticleUri': wikipediaArticleUri };
}




class ContextAnonymousDto implements ContextDto {
    
    ContextAnonymousDto(this.loggedIn);

    bool loggedIn;
    

    ContextAnonymousDto.fromJson(Map<String, dynamic> json)
      : loggedIn = json['loggedIn'] as bool;

    Map<String, dynamic> toJson() => { 'loggedIn': loggedIn };
}




class ContextDto {
    
    ContextDto(this.loggedIn);

    bool loggedIn;
    

    ContextDto.fromJson(Map<String, dynamic> json)
      : loggedIn = json['loggedIn'] as bool;

    Map<String, dynamic> toJson() => { 'loggedIn': loggedIn };
}




class ContextLoggedInDto implements ContextDto {
    
    ContextLoggedInDto(this.loggedIn, this.email, this.userId, this.userType);

    bool loggedIn;
                String email;
                String userId;
                UserType userType;
    

    ContextLoggedInDto.fromJson(Map<String, dynamic> json)
      : loggedIn = json['loggedIn'] as bool,email = json['email'] as String,userId = json['userId'] as String,userType = convertUserTypeFromJson(json['userType'] as String);

    Map<String, dynamic> toJson() => { 'loggedIn': loggedIn,'email': email,'userId': userId,'userType': convertUserTypeToJson(userType) };
}




class ContextRequest implements PostBodyLocation<EmptyRequestDto, ContextDto> {
    String get path => 'api/auth/context';
    ContextRequest();

    
    ContextDto bodyFromPostJson(dynamic json) =>  ContextDto.fromJson(json);

    ContextRequest.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class Currency {
    
    Currency(this.currencyCode, this.defaultFractionDigits, this.numericCode);

    String currencyCode;
                int defaultFractionDigits;
                int numericCode;
    

    Currency.fromJson(Map<String, dynamic> json)
      : currencyCode = json['currencyCode'] as String,defaultFractionDigits = json['defaultFractionDigits'] as int,numericCode = json['numericCode'] as int;

    Map<String, dynamic> toJson() => { 'currencyCode': currencyCode,'defaultFractionDigits': defaultFractionDigits,'numericCode': numericCode };
}




class CurrencyConversion {
    
    CurrencyConversion(this.source, this.symbol, this.target);

    String source;
                String symbol;
                String target;
    

    CurrencyConversion.fromJson(Map<String, dynamic> json)
      : source = json['source'] as String,symbol = json['symbol'] as String,target = json['target'] as String;

    Map<String, dynamic> toJson() => { 'source': source,'symbol': symbol,'target': target };
}




class CurrencyInfo {
    
    CurrencyInfo(this.code, this.name, this.symbol);

    String code;
                String name;
                String symbol;
    

    CurrencyInfo.fromJson(Map<String, dynamic> json)
      : code = json['code'] as String,name = json['name'] as String,symbol = json['symbol'] as String;

    Map<String, dynamic> toJson() => { 'code': code,'name': name,'symbol': symbol };
}




class EmptyRequestDto {
    
    EmptyRequestDto();

    
    

    EmptyRequestDto.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class EodStockData implements GetLocation<EodStockDataResponse> {
    String get path => Uri.parse('api/pricedata/eod').replace(queryParameters: {'currency': currency?.toString(),'end': end?.toString(),'sampleEveryN': sampleEveryN?.toString(),'start': start?.toString(),'symbols': symbols,}).toString();
    EodStockData(this.currency, this.end, this.sampleEveryN, this.start, this.symbols);

    String currency;
                /* yyyy-mm-dd date LocalDate */String end;
                int sampleEveryN;
                /* yyyy-mm-dd date LocalDate */String start;
                List<String> symbols;
    EodStockDataResponse bodyFromGetJson(dynamic json) =>  EodStockDataResponse.fromJson(json);

    EodStockData.fromJson(Map<String, dynamic> json)
      : currency = json['currency'] as String,end = json['end'] as /* yyyy-mm-dd date LocalDate */String,sampleEveryN = json['sampleEveryN'] as int,start = json['start'] as /* yyyy-mm-dd date LocalDate */String,symbols = (json['symbols'] as List<dynamic>).map((val) => val as String).toList();

    Map<String, dynamic> toJson() => { 'currency': currency,'end': end,'sampleEveryN': sampleEveryN,'start': start,'symbols': symbols.map((val) => val).toList() };
}




class EodStockDataResponse {
    
    EodStockDataResponse(this.currencyConversions, this.data, this.sampleEveryNth, this.snapshot);

    List<CurrencyConversion> currencyConversions;
                Map<String, List<double>> data;
                int sampleEveryNth;
                Map<String, PdInstrument> snapshot;
    

    EodStockDataResponse.fromJson(Map<String, dynamic> json)
      : currencyConversions = (json['currencyConversions'] as List<dynamic>).map((val) =>  CurrencyConversion.fromJson(val)).toList(),data = (json['data'] as Map<dynamic, dynamic>).map((key, value) => MapEntry(key as String, (value as List<dynamic>).map((val) => (val as num).toDouble()).toList())),sampleEveryNth = json['sampleEveryNth'] as int,snapshot = (json['snapshot'] as Map<dynamic, dynamic>).map((key, value) => MapEntry(key as String,  PdInstrument.fromJson(value)));

    Map<String, dynamic> toJson() => { 'currencyConversions': currencyConversions.map((val) => val.toJson()).toList(),'data': data.map((key, value) => MapEntry((key), (value.map((val) => val).toList()))),'sampleEveryNth': sampleEveryNth,'snapshot': snapshot.map((key, value) => MapEntry((key), (value.toJson()))) };
}




class ErrorResponse {
    
    ErrorResponse(this.message);

    String message;
    

    ErrorResponse.fromJson(Map<String, dynamic> json)
      : message = json['message'] as String;

    Map<String, dynamic> toJson() => { 'message': message };
}




class Exchange {
    
    Exchange(this.country, this.equityExchangeName, this.id, this.label, this.micCode, this.name, this.operatingMicCode);

    String country;
                String equityExchangeName;
                String id;
                String label;
                String micCode;
                String name;
                String operatingMicCode;
    

    Exchange.fromJson(Map<String, dynamic> json)
      : country = json['country'] as String,equityExchangeName = json['equityExchangeName'] as String,id = json['id'] as String,label = json['label'] as String,micCode = json['micCode'] as String,name = json['name'] as String,operatingMicCode = json['operatingMicCode'] as String;

    Map<String, dynamic> toJson() => { 'country': country,'equityExchangeName': equityExchangeName,'id': id,'label': label,'micCode': micCode,'name': name,'operatingMicCode': operatingMicCode };
}




class GameChallengeDetailsParticipants {
    
    GameChallengeDetailsParticipants(this.baseInfo, this.myself, this.statsCorrectAnswers, this.status);

    GameUserBaseInfo baseInfo;
                bool myself;
                int statsCorrectAnswers;
                GameChallengeParticipantStatus status;
    

    GameChallengeDetailsParticipants.fromJson(Map<String, dynamic> json)
      : baseInfo =  GameUserBaseInfo.fromJson(json['baseInfo']),myself = json['myself'] as bool,statsCorrectAnswers = json['statsCorrectAnswers'] as int,status = convertGameChallengeParticipantStatusFromJson(json['status'] as String);

    Map<String, dynamic> toJson() => { 'baseInfo': baseInfo.toJson(),'myself': myself,'statsCorrectAnswers': statsCorrectAnswers,'status': convertGameChallengeParticipantStatusToJson(status) };
}




class GameChallengeDetailsResponse {
    
    GameChallengeDetailsResponse(this.baseInfo, this.participants);

    GameChallengeInfoDto baseInfo;
                List<GameChallengeDetailsParticipants> participants;
    

    GameChallengeDetailsResponse.fromJson(Map<String, dynamic> json)
      : baseInfo =  GameChallengeInfoDto.fromJson(json['baseInfo']),participants = (json['participants'] as List<dynamic>).map((val) =>  GameChallengeDetailsParticipants.fromJson(val)).toList();

    Map<String, dynamic> toJson() => { 'baseInfo': baseInfo.toJson(),'participants': participants.map((val) => val.toJson()).toList() };
}




class GameChallengeDto {
    
    GameChallengeDto(this.challengeId, this.simpleGame);

    String challengeId;
                List<GameSimpleSetResponse> simpleGame;
    

    GameChallengeDto.fromJson(Map<String, dynamic> json)
      : challengeId = json['challengeId'] as String,simpleGame = (json['simpleGame'] as List<dynamic>).map((val) =>  GameSimpleSetResponse.fromJson(val)).toList();

    Map<String, dynamic> toJson() => { 'challengeId': challengeId,'simpleGame': simpleGame.map((val) => val.toJson()).toList() };
}




class GameChallengeInfoDto {
    
    GameChallengeInfoDto(this.challengeId, this.createdAt, this.createdBy, this.inviteToken, this.myParticipantStatus, this.status, this.type);

    String challengeId;
                InstantWrapper createdAt;
                GameUserBaseInfo createdBy;
                String inviteToken;
                GameChallengeParticipantStatus myParticipantStatus;
                GameChallengeStatus status;
                GameChallengeType type;
    

    GameChallengeInfoDto.fromJson(Map<String, dynamic> json)
      : challengeId = json['challengeId'] as String,createdAt =  InstantWrapper.fromJson(json['createdAt']),createdBy = json['createdBy'] == null ? null :  GameUserBaseInfo.fromJson(json['createdBy']),inviteToken = json['inviteToken'] as String,myParticipantStatus = convertGameChallengeParticipantStatusFromJson(json['myParticipantStatus'] as String),status = convertGameChallengeStatusFromJson(json['status'] as String),type = convertGameChallengeTypeFromJson(json['type'] as String);

    Map<String, dynamic> toJson() => { 'challengeId': challengeId,'createdAt': createdAt.toJson(),'createdBy': createdBy.toJson(),'inviteToken': inviteToken,'myParticipantStatus': convertGameChallengeParticipantStatusToJson(myParticipantStatus),'status': convertGameChallengeStatusToJson(status),'type': convertGameChallengeTypeToJson(type) };
}




class GameChallengeInviteCreateRequest {
    
    GameChallengeInviteCreateRequest(this.displayName, this.gameUserToken, this.type);

    String displayName;
                String gameUserToken;
                GameChallengeInviteType type;
    

    GameChallengeInviteCreateRequest.fromJson(Map<String, dynamic> json)
      : displayName = json['displayName'] as String,gameUserToken = json['gameUserToken'] as String,type = convertGameChallengeInviteTypeFromJson(json['type'] as String);

    Map<String, dynamic> toJson() => { 'displayName': displayName,'gameUserToken': gameUserToken,'type': convertGameChallengeInviteTypeToJson(type) };
}




class GameChallengeInviteInfoAcceptRequest {
    
    GameChallengeInviteInfoAcceptRequest();

    
    

    GameChallengeInviteInfoAcceptRequest.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class GameChallengeInviteInfoLocation implements GetLocation<GameChallengeInviteInfoResponse>, PutBodyLocation<GameChallengeInviteInfoAcceptRequest, GameChallengeDto> {
    String get path => 'api/game/challenge/invite/{token}'.replaceAll('{token}', this.token);
    GameChallengeInviteInfoLocation(this.token);

    String token;
    GameChallengeInviteInfoResponse bodyFromGetJson(dynamic json) =>  GameChallengeInviteInfoResponse.fromJson(json);
                GameChallengeDto bodyFromPutJson(dynamic json) =>  GameChallengeDto.fromJson(json);

    GameChallengeInviteInfoLocation.fromJson(Map<String, dynamic> json)
      : token = json['token'] as String;

    Map<String, dynamic> toJson() => { 'token': token };
}




class GameChallengeInviteInfoResponse {
    
    GameChallengeInviteInfoResponse(this.challengeType, this.createdBy);

    GameChallengeType challengeType;
                GameUserBaseInfo createdBy;
    

    GameChallengeInviteInfoResponse.fromJson(Map<String, dynamic> json)
      : challengeType = convertGameChallengeTypeFromJson(json['challengeType'] as String),createdBy =  GameUserBaseInfo.fromJson(json['createdBy']);

    Map<String, dynamic> toJson() => { 'challengeType': convertGameChallengeTypeToJson(challengeType),'createdBy': createdBy.toJson() };
}




class GameChallengeInviteLocation implements PostBodyLocation<GameChallengeInviteCreateRequest, GameChallengeInviteResponse> {
    String get path => 'api/game/challenge/invite';
    GameChallengeInviteLocation();

    
    GameChallengeInviteResponse bodyFromPostJson(dynamic json) =>  GameChallengeInviteResponse.fromJson(json);

    GameChallengeInviteLocation.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class GameChallengeInviteResponse {
    
    GameChallengeInviteResponse(this.inviteToken);

    String inviteToken;
    

    GameChallengeInviteResponse.fromJson(Map<String, dynamic> json)
      : inviteToken = json['inviteToken'] as String;

    Map<String, dynamic> toJson() => { 'inviteToken': inviteToken };
}




class GameChallengeListLocation implements GetLocation<GameChallengeListResponse> {
    String get path => 'api/game/challenge/list';
    GameChallengeListLocation();

    
    GameChallengeListResponse bodyFromGetJson(dynamic json) =>  GameChallengeListResponse.fromJson(json);

    GameChallengeListLocation.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class GameChallengeListResponse {
    
    GameChallengeListResponse(this.challenges, this.currentWeeklyChallenge);

    List<GameChallengeInfoDto> challenges;
                GameChallengeInfoDto currentWeeklyChallenge;
    

    GameChallengeListResponse.fromJson(Map<String, dynamic> json)
      : challenges = (json['challenges'] as List<dynamic>).map((val) =>  GameChallengeInfoDto.fromJson(val)).toList(),currentWeeklyChallenge =  GameChallengeInfoDto.fromJson(json['currentWeeklyChallenge']);

    Map<String, dynamic> toJson() => { 'challenges': challenges.map((val) => val.toJson()).toList(),'currentWeeklyChallenge': currentWeeklyChallenge.toJson() };
}




class GameChallengeLocation implements GetLocation<GameChallengeDetailsResponse>, PutBodyLocation<GameChallengeRequest, GameChallengeDto> {
    String get path => 'api/game/challenge/{challengeId}'.replaceAll('{challengeId}', this.challengeId);
    GameChallengeLocation(this.challengeId);

    String challengeId;
    GameChallengeDetailsResponse bodyFromGetJson(dynamic json) =>  GameChallengeDetailsResponse.fromJson(json);
                GameChallengeDto bodyFromPutJson(dynamic json) =>  GameChallengeDto.fromJson(json);

    GameChallengeLocation.fromJson(Map<String, dynamic> json)
      : challengeId = json['challengeId'] as String;

    Map<String, dynamic> toJson() => { 'challengeId': challengeId };
}




class GameChallengeRequest {
    
    GameChallengeRequest(this.action);

    GameChallengeAction action;
    

    GameChallengeRequest.fromJson(Map<String, dynamic> json)
      : action = convertGameChallengeActionFromJson(json['action'] as String);

    Map<String, dynamic> toJson() => { 'action': convertGameChallengeActionToJson(action) };
}




class GameNotification {
    
    GameNotification(this.challengeId, this.inviteToken, this.type);

    String challengeId;
                String inviteToken;
                GameNotificationType type;
    

    GameNotification.fromJson(Map<String, dynamic> json)
      : challengeId = json['challengeId'] as String,inviteToken = json['inviteToken'] as String,type = convertGameNotificationTypeFromJson(json['type'] as String);

    Map<String, dynamic> toJson() => { 'challengeId': challengeId,'inviteToken': inviteToken,'type': convertGameNotificationTypeToJson(type) };
}




class GameSimpleSetGuessDto {
    
    GameSimpleSetGuessDto(this.instrumentKey, this.marketCap);

    String instrumentKey;
                double marketCap;
    

    GameSimpleSetGuessDto.fromJson(Map<String, dynamic> json)
      : instrumentKey = json['instrumentKey'] as String,marketCap = (json['marketCap'] as num).toDouble();

    Map<String, dynamic> toJson() => { 'instrumentKey': instrumentKey,'marketCap': marketCap };
}




class GameSimpleSetLocation implements GetLocation<GameSimpleSetResponse>, PostBodyLocation<GameSimpleSetVerifyRequest, GameSimpleSetVerifyResponse> {
    String get path => 'api/game/simpleGameSet';
    GameSimpleSetLocation();

    
    GameSimpleSetResponse bodyFromGetJson(dynamic json) =>  GameSimpleSetResponse.fromJson(json);
                GameSimpleSetVerifyResponse bodyFromPostJson(dynamic json) =>  GameSimpleSetVerifyResponse.fromJson(json);

    GameSimpleSetLocation.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class GameSimpleSetResponse {
    
    GameSimpleSetResponse(this.gameTurnId, this.marketCapScaleMax, this.marketCapScaleMin, this.simpleGame);

    String gameTurnId;
                double marketCapScaleMax;
                double marketCapScaleMin;
                List<SimpleGameDto> simpleGame;
    

    GameSimpleSetResponse.fromJson(Map<String, dynamic> json)
      : gameTurnId = json['gameTurnId'] as String,marketCapScaleMax = (json['marketCapScaleMax'] as num).toDouble(),marketCapScaleMin = (json['marketCapScaleMin'] as num).toDouble(),simpleGame = (json['simpleGame'] as List<dynamic>).map((val) =>  SimpleGameDto.fromJson(val)).toList();

    Map<String, dynamic> toJson() => { 'gameTurnId': gameTurnId,'marketCapScaleMax': marketCapScaleMax,'marketCapScaleMin': marketCapScaleMin,'simpleGame': simpleGame.map((val) => val.toJson()).toList() };
}




class GameSimpleSetVerifyRequest {
    
    GameSimpleSetVerifyRequest(this.gameTurnId, this.guesses);

    String gameTurnId;
                List<GameSimpleSetGuessDto> guesses;
    

    GameSimpleSetVerifyRequest.fromJson(Map<String, dynamic> json)
      : gameTurnId = json['gameTurnId'] as String,guesses = (json['guesses'] as List<dynamic>).map((val) =>  GameSimpleSetGuessDto.fromJson(val)).toList();

    Map<String, dynamic> toJson() => { 'gameTurnId': gameTurnId,'guesses': guesses.map((val) => val.toJson()).toList() };
}




class GameSimpleSetVerifyResponse {
    
    GameSimpleSetVerifyResponse(this.actual, this.correctCount, this.details, this.statsCorrectAnswers, this.statsTotalTurns);

    List<GameSimpleSetGuessDto> actual;
                int correctCount;
                List<CompanyInfoDetails> details;
                int statsCorrectAnswers;
                int statsTotalTurns;
    

    GameSimpleSetVerifyResponse.fromJson(Map<String, dynamic> json)
      : actual = (json['actual'] as List<dynamic>).map((val) =>  GameSimpleSetGuessDto.fromJson(val)).toList(),correctCount = json['correctCount'] as int,details = (json['details'] as List<dynamic>).map((val) =>  CompanyInfoDetails.fromJson(val)).toList(),statsCorrectAnswers = json['statsCorrectAnswers'] as int,statsTotalTurns = json['statsTotalTurns'] as int;

    Map<String, dynamic> toJson() => { 'actual': actual.map((val) => val.toJson()).toList(),'correctCount': correctCount,'details': details.map((val) => val.toJson()).toList(),'statsCorrectAnswers': statsCorrectAnswers,'statsTotalTurns': statsTotalTurns };
}




class GameUserBaseInfo {
    
    GameUserBaseInfo(this.avatarUrl, this.displayName);

    String avatarUrl;
                String displayName;
    

    GameUserBaseInfo.fromJson(Map<String, dynamic> json)
      : avatarUrl = json['avatarUrl'] as String,displayName = json['displayName'] as String;

    Map<String, dynamic> toJson() => { 'avatarUrl': avatarUrl,'displayName': displayName };
}




class Holding {
    
    Holding(this.count, this.instrument, this.purchasePriceCurrency, this.purchasePriceValue, this.purchaseSpentCurrency, this.purchaseSpentValue);

    double count;
                Instrument instrument;
                CurrencyInfo purchasePriceCurrency;
                double purchasePriceValue;
                CurrencyInfo purchaseSpentCurrency;
                double purchaseSpentValue;
    

    Holding.fromJson(Map<String, dynamic> json)
      : count = (json['count'] as num).toDouble(),instrument =  Instrument.fromJson(json['instrument']),purchasePriceCurrency =  CurrencyInfo.fromJson(json['purchasePriceCurrency']),purchasePriceValue = (json['purchasePriceValue'] as num).toDouble(),purchaseSpentCurrency =  CurrencyInfo.fromJson(json['purchaseSpentCurrency']),purchaseSpentValue = (json['purchaseSpentValue'] as num).toDouble();

    Map<String, dynamic> toJson() => { 'count': count,'instrument': instrument.toJson(),'purchasePriceCurrency': purchasePriceCurrency.toJson(),'purchasePriceValue': purchasePriceValue,'purchaseSpentCurrency': purchaseSpentCurrency.toJson(),'purchaseSpentValue': purchaseSpentValue };
}




class HoldingsListResponse {
    
    HoldingsListResponse(this.data, this.label);

    List<Holding> data;
                Label label;
    

    HoldingsListResponse.fromJson(Map<String, dynamic> json)
      : data = (json['data'] as List<dynamic>).map((val) =>  Holding.fromJson(val)).toList(),label =  Label.fromJson(json['label']);

    Map<String, dynamic> toJson() => { 'data': data.map((val) => val.toJson()).toList(),'label': label.toJson() };
}




class ImageFileLocation implements GetLocation<dynamic> {
    String get path => 'api/pricedata/image/{key}'.replaceAll('{key}', this.key);
    ImageFileLocation(this.key);

    String key;
    dynamic bodyFromGetJson(dynamic json) => json as dynamic;

    ImageFileLocation.fromJson(Map<String, dynamic> json)
      : key = json['key'] as String;

    Map<String, dynamic> toJson() => { 'key': key };
}




class ImportManual implements PostBodyLocation<ManualImportRequest, String> {
    String get path => 'api/portfolio/{labelToken}/import/manual'.replaceAll('{labelToken}', this.labelToken);
    ImportManual(this.labelToken);

    String labelToken;
    String bodyFromPostJson(dynamic json) => json as String;

    ImportManual.fromJson(Map<String, dynamic> json)
      : labelToken = json['labelToken'] as String;

    Map<String, dynamic> toJson() => { 'labelToken': labelToken };
}




class ImportStart implements PostBodyLocation<ImportStartRequest, ImportStartResponse> {
    String get path => 'api/portfolio/import/start';
    ImportStart();

    
    ImportStartResponse bodyFromPostJson(dynamic json) =>  ImportStartResponse.fromJson(json);

    ImportStart.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class ImportStartRequest {
    
    ImportStartRequest(this.importFormat, this.importId);

    ImportType importFormat;
                String importId;
    

    ImportStartRequest.fromJson(Map<String, dynamic> json)
      : importFormat = convertImportTypeFromJson(json['importFormat'] as String),importId = json['importId'] as String;

    Map<String, dynamic> toJson() => { 'importFormat': convertImportTypeToJson(importFormat),'importId': importId };
}




class ImportStartResponse {
    
    ImportStartResponse(this.createdLabel);

    String createdLabel;
    

    ImportStartResponse.fromJson(Map<String, dynamic> json)
      : createdLabel = json['createdLabel'] as String;

    Map<String, dynamic> toJson() => { 'createdLabel': createdLabel };
}




class ImportTypeDto {
    
    ImportTypeDto(this.label, this.type);

    String label;
                ImportType type;
    

    ImportTypeDto.fromJson(Map<String, dynamic> json)
      : label = json['label'] as String,type = convertImportTypeFromJson(json['type'] as String);

    Map<String, dynamic> toJson() => { 'label': label,'type': convertImportTypeToJson(type) };
}




class InetAddress {
    
    InetAddress(this.holder, this.canonicalHostName);

    InetAddressHolder holder;
                String canonicalHostName;
    

    InetAddress.fromJson(Map<String, dynamic> json)
      : holder =  InetAddressHolder.fromJson(json['holder']),canonicalHostName = json['canonicalHostName'] as String;

    Map<String, dynamic> toJson() => { 'holder': holder.toJson(),'canonicalHostName': canonicalHostName };
}




class InetAddressHolder {
    
    InetAddressHolder(this.originalHostName, this.hostName, this.address, this.family);

    String originalHostName;
                String hostName;
                int address;
                int family;
    

    InetAddressHolder.fromJson(Map<String, dynamic> json)
      : originalHostName = json['originalHostName'] as String,hostName = json['hostName'] as String,address = json['address'] as int,family = json['family'] as int;

    Map<String, dynamic> toJson() => { 'originalHostName': originalHostName,'hostName': hostName,'address': address,'family': family };
}




class InitPasswordReset implements PostBodyLocation<InitPasswordResetBody, Unit> {
    String get path => 'api/auth/initPasswordReset';
    InitPasswordReset();

    
    Unit bodyFromPostJson(dynamic json) =>  Unit.fromJson(json);

    InitPasswordReset.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class InitPasswordResetBody {
    
    InitPasswordResetBody(this.emailAddress);

    String emailAddress;
    

    InitPasswordResetBody.fromJson(Map<String, dynamic> json)
      : emailAddress = json['emailAddress'] as String;

    Map<String, dynamic> toJson() => { 'emailAddress': emailAddress };
}




class Instrument {
    
    Instrument(this.exchange, this.figi, this.id, this.isin, this.name, this.symbol, this.symbolEod, this.type);

    Exchange exchange;
                String figi;
                String id;
                String isin;
                String name;
                String symbol;
                String symbolEod;
                InstrumentType type;
    

    Instrument.fromJson(Map<String, dynamic> json)
      : exchange =  Exchange.fromJson(json['exchange']),figi = json['figi'] as String,id = json['id'] as String,isin = json['isin'] as String,name = json['name'] as String,symbol = json['symbol'] as String,symbolEod = json['symbolEod'] as String,type = convertInstrumentTypeFromJson(json['type'] as String);

    Map<String, dynamic> toJson() => { 'exchange': exchange.toJson(),'figi': figi,'id': id,'isin': isin,'name': name,'symbol': symbol,'symbolEod': symbolEod,'type': convertInstrumentTypeToJson(type) };
}




class InstrumentBase {
    
    InstrumentBase(this.symbol, this.symbolSuffix, this.symbolWithoutSuffix);

    String symbol;
                String symbolSuffix;
                String symbolWithoutSuffix;
    

    InstrumentBase.fromJson(Map<String, dynamic> json)
      : symbol = json['symbol'] as String,symbolSuffix = json['symbolSuffix'] as String,symbolWithoutSuffix = json['symbolWithoutSuffix'] as String;

    Map<String, dynamic> toJson() => { 'symbol': symbol,'symbolSuffix': symbolSuffix,'symbolWithoutSuffix': symbolWithoutSuffix };
}




class InstrumentImageDto {
    
    InstrumentImageDto(this.fileName, this.height, this.id, this.imageType, this.mimeType, this.width);

    String fileName;
                int height;
                String id;
                ImageType imageType;
                String mimeType;
                int width;
    

    InstrumentImageDto.fromJson(Map<String, dynamic> json)
      : fileName = json['fileName'] as String,height = json['height'] as int,id = json['id'] as String,imageType = convertImageTypeFromJson(json['imageType'] as String),mimeType = json['mimeType'] as String,width = json['width'] as int;

    Map<String, dynamic> toJson() => { 'fileName': fileName,'height': height,'id': id,'imageType': convertImageTypeToJson(imageType),'mimeType': mimeType,'width': width };
}




class InstrumentLogoLocation implements GetLocation<dynamic> {
    String get path => 'api/pricedata/instrument/{key}/logo'.replaceAll('{key}', this.key);
    InstrumentLogoLocation(this.key);

    String key;
    dynamic bodyFromGetJson(dynamic json) => json as dynamic;

    InstrumentLogoLocation.fromJson(Map<String, dynamic> json)
      : key = json['key'] as String;

    Map<String, dynamic> toJson() => { 'key': key };
}




class Label {
    
    Label(this.archivedAt, this.id, this.name, this.permissions, this.privacy, this.token, this.type);

    InstantWrapper archivedAt;
                String id;
                String name;
                List<Permission> permissions;
                LabelPrivacy privacy;
                String token;
                LabelType type;
    

    Label.fromJson(Map<String, dynamic> json)
      : archivedAt =  InstantWrapper.fromJson(json['archivedAt']),id = json['id'] as String,name = json['name'] as String,permissions = (json['permissions'] as List<dynamic>).map((val) =>  Permission.fromJson(val)).toList(),privacy = convertLabelPrivacyFromJson(json['privacy'] as String),token = json['token'] as String,type = convertLabelTypeFromJson(json['type'] as String);

    Map<String, dynamic> toJson() => { 'archivedAt': archivedAt.toJson(),'id': id,'name': name,'permissions': permissions.map((val) => val.toJson()).toList(),'privacy': convertLabelPrivacyToJson(privacy),'token': token,'type': convertLabelTypeToJson(type) };
}




class LeaderboardEntry {
    
    LeaderboardEntry(this.avatarUrl, this.displayName, this.loggedInUser, this.rank, this.statsCorrectAnswers, this.statsTotalTurns, this.userToken);

    String avatarUrl;
                String displayName;
                bool loggedInUser;
                int rank;
                int statsCorrectAnswers;
                int statsTotalTurns;
                String userToken;
    

    LeaderboardEntry.fromJson(Map<String, dynamic> json)
      : avatarUrl = json['avatarUrl'] as String,displayName = json['displayName'] as String,loggedInUser = json['loggedInUser'] as bool,rank = json['rank'] as int,statsCorrectAnswers = json['statsCorrectAnswers'] as int,statsTotalTurns = json['statsTotalTurns'] as int,userToken = json['userToken'] as String;

    Map<String, dynamic> toJson() => { 'avatarUrl': avatarUrl,'displayName': displayName,'loggedInUser': loggedInUser,'rank': rank,'statsCorrectAnswers': statsCorrectAnswers,'statsTotalTurns': statsTotalTurns,'userToken': userToken };
}




class LeaderboardSimpleLocation implements GetLocation<LeaderboardSimpleResponse> {
    String get path => 'api/game/leaderboard/simple';
    LeaderboardSimpleLocation();

    
    LeaderboardSimpleResponse bodyFromGetJson(dynamic json) =>  LeaderboardSimpleResponse.fromJson(json);

    LeaderboardSimpleLocation.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class LeaderboardSimpleResponse {
    
    LeaderboardSimpleResponse(this.leaderboardEntries);

    List<LeaderboardEntry> leaderboardEntries;
    

    LeaderboardSimpleResponse.fromJson(Map<String, dynamic> json)
      : leaderboardEntries = (json['leaderboardEntries'] as List<dynamic>).map((val) =>  LeaderboardEntry.fromJson(val)).toList();

    Map<String, dynamic> toJson() => { 'leaderboardEntries': leaderboardEntries.map((val) => val.toJson()).toList() };
}




class LogEvent implements PostBodyLocation<LogEventRequest, Unit> {
    String get path => 'api/auth/log';
    LogEvent();

    
    Unit bodyFromPostJson(dynamic json) =>  Unit.fromJson(json);

    LogEvent.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class LogEventRequest {
    
    LogEventRequest(this.email, this.info, this.label);

    String email;
                Map<String, dynamic> info;
                String label;
    

    LogEventRequest.fromJson(Map<String, dynamic> json)
      : email = json['email'] as String,info = (json['info'] as Map<dynamic, dynamic>).map((key, value) => MapEntry(key as String, value as dynamic)),label = json['label'] as String;

    Map<String, dynamic> toJson() => { 'email': email,'info': info.map((key, value) => MapEntry((key), (value))),'label': label };
}




class LogShortLinkLocation implements PostBodyLocation<LogShortLinkRequest, Unit> {
    String get path => 'api/game/challenge/invite/shortlink';
    LogShortLinkLocation();

    
    Unit bodyFromPostJson(dynamic json) =>  Unit.fromJson(json);

    LogShortLinkLocation.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class LogShortLinkRequest {
    
    LogShortLinkRequest(this.inviteToken, this.shortLink);

    String inviteToken;
                String shortLink;
    

    LogShortLinkRequest.fromJson(Map<String, dynamic> json)
      : inviteToken = json['inviteToken'] as String,shortLink = json['shortLink'] as String;

    Map<String, dynamic> toJson() => { 'inviteToken': inviteToken,'shortLink': shortLink };
}




class Login implements PostBodyLocation<LoginRequest, ContextDto> {
    String get path => 'api/auth/login';
    Login();

    
    ContextDto bodyFromPostJson(dynamic json) =>  ContextDto.fromJson(json);

    Login.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class LoginRequest {
    
    LoginRequest(this.email, this.password);

    String email;
                String password;
    

    LoginRequest.fromJson(Map<String, dynamic> json)
      : email = json['email'] as String,password = json['password'] as String;

    Map<String, dynamic> toJson() => { 'email': email,'password': password };
}




class Logout implements PostBodyLocation<EmptyRequestDto, ContextDto> {
    String get path => 'api/auth/logout';
    Logout();

    
    ContextDto bodyFromPostJson(dynamic json) =>  ContextDto.fromJson(json);

    Logout.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class ManualImportRequest {
    
    ManualImportRequest(this.transactions);

    List<ManualImportTransaction> transactions;
    

    ManualImportRequest.fromJson(Map<String, dynamic> json)
      : transactions = (json['transactions'] as List<dynamic>).map((val) =>  ManualImportTransaction.fromJson(val)).toList();

    Map<String, dynamic> toJson() => { 'transactions': transactions.map((val) => val.toJson()).toList() };
}




class ManualImportTransaction {
    
    ManualImportTransaction(this.count, this.date, this.pricePerShare, this.symbol, this.totalSpent, this.type);

    double count;
                InstantWrapper date;
                double pricePerShare;
                String symbol;
                double totalSpent;
                TransactionType type;
    

    ManualImportTransaction.fromJson(Map<String, dynamic> json)
      : count = (json['count'] as num).toDouble(),date =  InstantWrapper.fromJson(json['date']),pricePerShare = (json['pricePerShare'] as num).toDouble(),symbol = json['symbol'] as String,totalSpent = (json['totalSpent'] as num).toDouble(),type = convertTransactionTypeFromJson(json['type'] as String);

    Map<String, dynamic> toJson() => { 'count': count,'date': date.toJson(),'pricePerShare': pricePerShare,'symbol': symbol,'totalSpent': totalSpent,'type': convertTransactionTypeToJson(type) };
}




class PdCompanyInfo {
    
    PdCompanyInfo(this.description, this.id, this.industries, this.instrument, this.label, this.logo, this.updatedAt, this.website, this.wikidataEntityUri, this.wikipediaArticleUri);

    String description;
                String id;
                List<PdCompanyInfoIndustry> industries;
                PdInstrumentEntity instrument;
                String label;
                URL logo;
                InstantWrapper updatedAt;
                URL website;
                String wikidataEntityUri;
                String wikipediaArticleUri;
    

    PdCompanyInfo.fromJson(Map<String, dynamic> json)
      : description = json['description'] as String,id = json['id'] as String,industries = (json['industries'] as List<dynamic>).map((val) =>  PdCompanyInfoIndustry.fromJson(val)).toList(),instrument =  PdInstrumentEntity.fromJson(json['instrument']),label = json['label'] as String,logo =  URL.fromJson(json['logo']),updatedAt =  InstantWrapper.fromJson(json['updatedAt']),website =  URL.fromJson(json['website']),wikidataEntityUri = json['wikidataEntityUri'] as String,wikipediaArticleUri = json['wikipediaArticleUri'] as String;

    Map<String, dynamic> toJson() => { 'description': description,'id': id,'industries': industries.map((val) => val.toJson()).toList(),'instrument': instrument.toJson(),'label': label,'logo': logo.toJson(),'updatedAt': updatedAt.toJson(),'website': website.toJson(),'wikidataEntityUri': wikidataEntityUri,'wikipediaArticleUri': wikipediaArticleUri };
}




class PdCompanyInfoIndustry {
    
    PdCompanyInfoIndustry(this.id, this.label, this.wikiDataUri);

    String id;
                String label;
                String wikiDataUri;
    

    PdCompanyInfoIndustry.fromJson(Map<String, dynamic> json)
      : id = json['id'] as String,label = json['label'] as String,wikiDataUri = json['wikiDataUri'] as String;

    Map<String, dynamic> toJson() => { 'id': id,'label': label,'wikiDataUri': wikiDataUri };
}




class PdImageFile {
    
    PdImageFile(this.brightnessRatio, this.createdAt, this.fileName, this.id, this.imageData, this.imageHeight, this.imageType, this.imageWidth, this.mimeType, this.mimeTypes, this.url);

    double brightnessRatio;
                InstantWrapper createdAt;
                String fileName;
                String id;
                List<int> imageData;
                int imageHeight;
                ImageType imageType;
                int imageWidth;
                String mimeType;
                List<String> mimeTypes;
                String url;
    

    PdImageFile.fromJson(Map<String, dynamic> json)
      : brightnessRatio = (json['brightnessRatio'] as num).toDouble(),createdAt =  InstantWrapper.fromJson(json['createdAt']),fileName = json['fileName'] as String,id = json['id'] as String,imageData = (json['imageData'] as List<dynamic>).map((val) => val as int).toList(),imageHeight = json['imageHeight'] as int,imageType = convertImageTypeFromJson(json['imageType'] as String),imageWidth = json['imageWidth'] as int,mimeType = json['mimeType'] as String,mimeTypes = (json['mimeTypes'] as List<dynamic>).map((val) => val as String).toList(),url = json['url'] as String;

    Map<String, dynamic> toJson() => { 'brightnessRatio': brightnessRatio,'createdAt': createdAt.toJson(),'fileName': fileName,'id': id,'imageData': imageData.map((val) => val).toList(),'imageHeight': imageHeight,'imageType': convertImageTypeToJson(imageType),'imageWidth': imageWidth,'mimeType': mimeType,'mimeTypes': mimeTypes.map((val) => val).toList(),'url': url };
}




class PdInstrument implements InstrumentBase {
    
    PdInstrument(this.symbol, this.symbolSuffix, this.symbolWithoutSuffix, this.createdAt, this.currency, this.exchange, this.exchangeName, this.micCompositionCode, this.name, this.shortName, this.snapshot, this.type);

    String symbol;
                String symbolSuffix;
                String symbolWithoutSuffix;
                InstantWrapper createdAt;
                String currency;
                String exchange;
                String exchangeName;
                String micCompositionCode;
                String name;
                String shortName;
                PdInstrumentSnapshot snapshot;
                PdInstrumentType type;
    

    PdInstrument.fromJson(Map<String, dynamic> json)
      : symbol = json['symbol'] as String,symbolSuffix = json['symbolSuffix'] as String,symbolWithoutSuffix = json['symbolWithoutSuffix'] as String,createdAt =  InstantWrapper.fromJson(json['createdAt']),currency = json['currency'] as String,exchange = json['exchange'] as String,exchangeName = json['exchangeName'] as String,micCompositionCode = json['micCompositionCode'] as String,name = json['name'] as String,shortName = json['shortName'] as String,snapshot =  PdInstrumentSnapshot.fromJson(json['snapshot']),type = convertPdInstrumentTypeFromJson(json['type'] as String);

    Map<String, dynamic> toJson() => { 'symbol': symbol,'symbolSuffix': symbolSuffix,'symbolWithoutSuffix': symbolWithoutSuffix,'createdAt': createdAt.toJson(),'currency': currency,'exchange': exchange,'exchangeName': exchangeName,'micCompositionCode': micCompositionCode,'name': name,'shortName': shortName,'snapshot': snapshot.toJson(),'type': convertPdInstrumentTypeToJson(type) };
}




class PdInstrumentConfig {
    
    PdInstrumentConfig(this.id, this.instrument, this.preferredLogo);

    String id;
                PdInstrumentEntity instrument;
                PdImageFile preferredLogo;
    

    PdInstrumentConfig.fromJson(Map<String, dynamic> json)
      : id = json['id'] as String,instrument =  PdInstrumentEntity.fromJson(json['instrument']),preferredLogo = json['preferredLogo'] == null ? null :  PdImageFile.fromJson(json['preferredLogo']);

    Map<String, dynamic> toJson() => { 'id': id,'instrument': instrument.toJson(),'preferredLogo': preferredLogo.toJson() };
}




class PdInstrumentDto {
    
    PdInstrumentDto(this.currencyCode, this.id, this.marketCap, this.name, this.symbol, this.type, this.volume, this.website);

    String currencyCode;
                String id;
                double marketCap;
                String name;
                String symbol;
                PdInstrumentType type;
                double volume;
                String website;
    

    PdInstrumentDto.fromJson(Map<String, dynamic> json)
      : currencyCode = json['currencyCode'] as String,id = json['id'] as String,marketCap = (json['marketCap'] as num).toDouble(),name = json['name'] as String,symbol = json['symbol'] as String,type = convertPdInstrumentTypeFromJson(json['type'] as String),volume = (json['volume'] as num).toDouble(),website = json['website'] as String;

    Map<String, dynamic> toJson() => { 'currencyCode': currencyCode,'id': id,'marketCap': marketCap,'name': name,'symbol': symbol,'type': convertPdInstrumentTypeToJson(type),'volume': volume,'website': website };
}




class PdInstrumentEntity implements InstrumentBase {
    
    PdInstrumentEntity(this.symbol, this.symbolSuffix, this.symbolWithoutSuffix, this.companyImagesLastFetched, this.companyInfoLastFetched, this.companyName, this.companyWebsite, this.companyWebsiteUrl, this.config, this.filledEodEnd, this.filledEodStart, this.id, this.images, this.lastStockSnapshot, this.type);

    String symbol;
                String symbolSuffix;
                String symbolWithoutSuffix;
                InstantWrapper companyImagesLastFetched;
                InstantWrapper companyInfoLastFetched;
                String companyName;
                String companyWebsite;
                URL companyWebsiteUrl;
                PdInstrumentConfig config;
                /* yyyy-mm-dd date LocalDate */String filledEodEnd;
                /* yyyy-mm-dd date LocalDate */String filledEodStart;
                String id;
                List<PdInstrumentImage> images;
                PdStockDataSnapshotEntity lastStockSnapshot;
                PdInstrumentType type;
    

    PdInstrumentEntity.fromJson(Map<String, dynamic> json)
      : symbol = json['symbol'] as String,symbolSuffix = json['symbolSuffix'] as String,symbolWithoutSuffix = json['symbolWithoutSuffix'] as String,companyImagesLastFetched =  InstantWrapper.fromJson(json['companyImagesLastFetched']),companyInfoLastFetched =  InstantWrapper.fromJson(json['companyInfoLastFetched']),companyName = json['companyName'] as String,companyWebsite = json['companyWebsite'] as String,companyWebsiteUrl = json['companyWebsiteUrl'] == null ? null :  URL.fromJson(json['companyWebsiteUrl']),config = json['config'] == null ? null :  PdInstrumentConfig.fromJson(json['config']),filledEodEnd = json['filledEodEnd'] as /* yyyy-mm-dd date LocalDate */String,filledEodStart = json['filledEodStart'] as /* yyyy-mm-dd date LocalDate */String,id = json['id'] as String,images = (json['images'] as List<dynamic>).map((val) =>  PdInstrumentImage.fromJson(val)).toList(),lastStockSnapshot = json['lastStockSnapshot'] == null ? null :  PdStockDataSnapshotEntity.fromJson(json['lastStockSnapshot']),type = convertPdInstrumentTypeFromJson(json['type'] as String);

    Map<String, dynamic> toJson() => { 'symbol': symbol,'symbolSuffix': symbolSuffix,'symbolWithoutSuffix': symbolWithoutSuffix,'companyImagesLastFetched': companyImagesLastFetched.toJson(),'companyInfoLastFetched': companyInfoLastFetched.toJson(),'companyName': companyName,'companyWebsite': companyWebsite,'companyWebsiteUrl': companyWebsiteUrl.toJson(),'config': config.toJson(),'filledEodEnd': filledEodEnd,'filledEodStart': filledEodStart,'id': id,'images': images.map((val) => val.toJson()).toList(),'lastStockSnapshot': lastStockSnapshot.toJson(),'type': convertPdInstrumentTypeToJson(type) };
}




class PdInstrumentImage {
    
    PdInstrumentImage(this.id, this.imageFile, this.instrument);

    PdInstrumentImageId id;
                PdImageFile imageFile;
                PdInstrumentEntity instrument;
    

    PdInstrumentImage.fromJson(Map<String, dynamic> json)
      : id =  PdInstrumentImageId.fromJson(json['id']),imageFile =  PdImageFile.fromJson(json['imageFile']),instrument =  PdInstrumentEntity.fromJson(json['instrument']);

    Map<String, dynamic> toJson() => { 'id': id.toJson(),'imageFile': imageFile.toJson(),'instrument': instrument.toJson() };
}




class PdInstrumentImageId {
    
    PdInstrumentImageId(this.imageFileId, this.instrumentId);

    String imageFileId;
                String instrumentId;
    

    PdInstrumentImageId.fromJson(Map<String, dynamic> json)
      : imageFileId = json['imageFileId'] as String,instrumentId = json['instrumentId'] as String;

    Map<String, dynamic> toJson() => { 'imageFileId': imageFileId,'instrumentId': instrumentId };
}




class PdInstrumentSnapshot {
    
    PdInstrumentSnapshot(this.regularMarketPrice, this.stockStats, this.volume);

    double regularMarketPrice;
                PdStockStats stockStats;
                double volume;
    

    PdInstrumentSnapshot.fromJson(Map<String, dynamic> json)
      : regularMarketPrice = (json['regularMarketPrice'] as num).toDouble(),stockStats = json['stockStats'] == null ? null :  PdStockStats.fromJson(json['stockStats']),volume = (json['volume'] as num).toDouble();

    Map<String, dynamic> toJson() => { 'regularMarketPrice': regularMarketPrice,'stockStats': stockStats.toJson(),'volume': volume };
}




class PdStockDataSnapshotEntity {
    
    PdStockDataSnapshotEntity(this.currency, this.date, this.epsForward, this.epsTrailing, this.exchangeName, this.floatShares, this.id, this.instrument, this.lastSplitDate, this.lastSplitFactor, this.marketCap, this.micCompositionCode, this.peForward, this.peTrailing, this.profitMargins, this.regularMarketPrice, this.sharesOutstanding, this.sharesShort, this.volume);

    Currency currency;
                InstantWrapper date;
                double epsForward;
                double epsTrailing;
                String exchangeName;
                double floatShares;
                String id;
                PdInstrumentEntity instrument;
                InstantWrapper lastSplitDate;
                String lastSplitFactor;
                double marketCap;
                String micCompositionCode;
                double peForward;
                double peTrailing;
                double profitMargins;
                double regularMarketPrice;
                double sharesOutstanding;
                double sharesShort;
                double volume;
    

    PdStockDataSnapshotEntity.fromJson(Map<String, dynamic> json)
      : currency =  Currency.fromJson(json['currency']),date =  InstantWrapper.fromJson(json['date']),epsForward = (json['epsForward'] as num).toDouble(),epsTrailing = (json['epsTrailing'] as num).toDouble(),exchangeName = json['exchangeName'] as String,floatShares = (json['floatShares'] as num).toDouble(),id = json['id'] as String,instrument =  PdInstrumentEntity.fromJson(json['instrument']),lastSplitDate =  InstantWrapper.fromJson(json['lastSplitDate']),lastSplitFactor = json['lastSplitFactor'] as String,marketCap = (json['marketCap'] as num).toDouble(),micCompositionCode = json['micCompositionCode'] as String,peForward = (json['peForward'] as num).toDouble(),peTrailing = (json['peTrailing'] as num).toDouble(),profitMargins = (json['profitMargins'] as num).toDouble(),regularMarketPrice = (json['regularMarketPrice'] as num).toDouble(),sharesOutstanding = (json['sharesOutstanding'] as num).toDouble(),sharesShort = (json['sharesShort'] as num).toDouble(),volume = (json['volume'] as num).toDouble();

    Map<String, dynamic> toJson() => { 'currency': currency.toJson(),'date': date.toJson(),'epsForward': epsForward,'epsTrailing': epsTrailing,'exchangeName': exchangeName,'floatShares': floatShares,'id': id,'instrument': instrument.toJson(),'lastSplitDate': lastSplitDate.toJson(),'lastSplitFactor': lastSplitFactor,'marketCap': marketCap,'micCompositionCode': micCompositionCode,'peForward': peForward,'peTrailing': peTrailing,'profitMargins': profitMargins,'regularMarketPrice': regularMarketPrice,'sharesOutstanding': sharesOutstanding,'sharesShort': sharesShort,'volume': volume };
}




class PdStockStats {
    
    PdStockStats(this.floatShares, this.marketCap, this.sharesOutstanding);

    double floatShares;
                double marketCap;
                double sharesOutstanding;
    

    PdStockStats.fromJson(Map<String, dynamic> json)
      : floatShares = (json['floatShares'] as num).toDouble(),marketCap = (json['marketCap'] as num).toDouble(),sharesOutstanding = (json['sharesOutstanding'] as num).toDouble();

    Map<String, dynamic> toJson() => { 'floatShares': floatShares,'marketCap': marketCap,'sharesOutstanding': sharesOutstanding };
}




class Permission {
    
    Permission(this.id, this.label, this.type, this.user);

    String id;
                Label label;
                PermissionType type;
                UserInfo user;
    

    Permission.fromJson(Map<String, dynamic> json)
      : id = json['id'] as String,label =  Label.fromJson(json['label']),type = convertPermissionTypeFromJson(json['type'] as String),user =  UserInfo.fromJson(json['user']);

    Map<String, dynamic> toJson() => { 'id': id,'label': label.toJson(),'type': convertPermissionTypeToJson(type),'user': user.toJson() };
}




class PortfolioCreateRequest {
    
    PortfolioCreateRequest(this.name);

    String name;
    

    PortfolioCreateRequest.fromJson(Map<String, dynamic> json)
      : name = json['name'] as String;

    Map<String, dynamic> toJson() => { 'name': name };
}




class PortfolioLabel implements GetLocation<PortfolioTransactionListResponse>, PutBodyLocation<PortfolioLabelUpdateRequest, String> {
    String get path => 'api/portfolio/{labelToken}'.replaceAll('{labelToken}', this.labelToken);
    PortfolioLabel(this.labelToken);

    String labelToken;
    PortfolioTransactionListResponse bodyFromGetJson(dynamic json) =>  PortfolioTransactionListResponse.fromJson(json);
                String bodyFromPutJson(dynamic json) => json as String;

    PortfolioLabel.fromJson(Map<String, dynamic> json)
      : labelToken = json['labelToken'] as String;

    Map<String, dynamic> toJson() => { 'labelToken': labelToken };
}




class PortfolioLabelHoldings implements GetLocation<HoldingsListResponse> {
    String get path => 'api/portfolio/{labelToken}/holdings'.replaceAll('{labelToken}', this.labelToken);
    PortfolioLabelHoldings(this.labelToken);

    String labelToken;
    HoldingsListResponse bodyFromGetJson(dynamic json) =>  HoldingsListResponse.fromJson(json);

    PortfolioLabelHoldings.fromJson(Map<String, dynamic> json)
      : labelToken = json['labelToken'] as String;

    Map<String, dynamic> toJson() => { 'labelToken': labelToken };
}




class PortfolioLabelUpdateRequest {
    
    PortfolioLabelUpdateRequest(this.archived, this.labelName, this.privacy);

    bool archived;
                String labelName;
                LabelPrivacy privacy;
    

    PortfolioLabelUpdateRequest.fromJson(Map<String, dynamic> json)
      : archived = json['archived'] as bool,labelName = json['labelName'] as String,privacy = convertLabelPrivacyFromJson(json['privacy'] as String);

    Map<String, dynamic> toJson() => { 'archived': archived,'labelName': labelName,'privacy': convertLabelPrivacyToJson(privacy) };
}




class PortfolioList implements GetLocation<PortfolioListResponse>, PostBodyLocation<PortfolioCreateRequest, String> {
    String get path => 'api/portfolio';
    PortfolioList();

    
    PortfolioListResponse bodyFromGetJson(dynamic json) =>  PortfolioListResponse.fromJson(json);
                String bodyFromPostJson(dynamic json) => json as String;

    PortfolioList.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class PortfolioListResponse {
    
    PortfolioListResponse(this.data);

    List<Label> data;
    

    PortfolioListResponse.fromJson(Map<String, dynamic> json)
      : data = (json['data'] as List<dynamic>).map((val) =>  Label.fromJson(val)).toList();

    Map<String, dynamic> toJson() => { 'data': data.map((val) => val.toJson()).toList() };
}




class PortfolioTransactionListResponse {
    
    PortfolioTransactionListResponse(this.data, this.label);

    List<Transaction> data;
                Label label;
    

    PortfolioTransactionListResponse.fromJson(Map<String, dynamic> json)
      : data = (json['data'] as List<dynamic>).map((val) =>  Transaction.fromJson(val)).toList(),label =  Label.fromJson(json['label']);

    Map<String, dynamic> toJson() => { 'data': data.map((val) => val.toJson()).toList(),'label': label.toJson() };
}




class RegisterDeviceLocation implements PostBodyLocation<RegisterDeviceRequest, RegisterDeviceResponse> {
    String get path => 'api/game/registerDevice';
    RegisterDeviceLocation();

    
    RegisterDeviceResponse bodyFromPostJson(dynamic json) =>  RegisterDeviceResponse.fromJson(json);

    RegisterDeviceLocation.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class RegisterDeviceRequest {
    
    RegisterDeviceRequest(this.deviceInfo, this.osInfo, this.platform);

    String deviceInfo;
                String osInfo;
                DevicePlatform platform;
    

    RegisterDeviceRequest.fromJson(Map<String, dynamic> json)
      : deviceInfo = json['deviceInfo'] as String,osInfo = json['osInfo'] as String,platform = convertDevicePlatformFromJson(json['platform'] as String);

    Map<String, dynamic> toJson() => { 'deviceInfo': deviceInfo,'osInfo': osInfo,'platform': convertDevicePlatformToJson(platform) };
}




class RegisterDeviceResponse {
    
    RegisterDeviceResponse(this.deviceKey, this.userKey);

    String deviceKey;
                String userKey;
    

    RegisterDeviceResponse.fromJson(Map<String, dynamic> json)
      : deviceKey = json['deviceKey'] as String,userKey = json['userKey'] as String;

    Map<String, dynamic> toJson() => { 'deviceKey': deviceKey,'userKey': userKey };
}




class SignUp implements PostBodyLocation<SignUpRequest, Unit> {
    String get path => 'api/auth/signup';
    SignUp();

    
    Unit bodyFromPostJson(dynamic json) =>  Unit.fromJson(json);

    SignUp.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class SignUpRequest {
    
    SignUpRequest(this.email, this.password);

    String email;
                String password;
    

    SignUpRequest.fromJson(Map<String, dynamic> json)
      : email = json['email'] as String,password = json['password'] as String;

    Map<String, dynamic> toJson() => { 'email': email,'password': password };
}




class SimpleGameDto {
    
    SimpleGameDto(this.instrumentKey, this.logo, this.symbol);

    String instrumentKey;
                InstrumentImageDto logo;
                String symbol;
    

    SimpleGameDto.fromJson(Map<String, dynamic> json)
      : instrumentKey = json['instrumentKey'] as String,logo =  InstrumentImageDto.fromJson(json['logo']),symbol = json['symbol'] as String;

    Map<String, dynamic> toJson() => { 'instrumentKey': instrumentKey,'logo': logo.toJson(),'symbol': symbol };
}




class StatsSummary implements GetLocation<StatsSummaryResponse> {
    String get path => Uri.parse('api/pricedata/stats').replace(queryParameters: {'endDate': endDate?.toString(),'startDate': startDate?.toString(),'type': type,}).toString();
    StatsSummary(this.endDate, this.startDate, this.type);

    /* yyyy-mm-dd date LocalDate */String endDate;
                /* yyyy-mm-dd date LocalDate */String startDate;
                StatsType type;
    StatsSummaryResponse bodyFromGetJson(dynamic json) =>  StatsSummaryResponse.fromJson(json);

    StatsSummary.fromJson(Map<String, dynamic> json)
      : endDate = json['endDate'] as /* yyyy-mm-dd date LocalDate */String,startDate = json['startDate'] as /* yyyy-mm-dd date LocalDate */String,type = convertStatsTypeFromJson(json['type'] as String);

    Map<String, dynamic> toJson() => { 'endDate': endDate,'startDate': startDate,'type': convertStatsTypeToJson(type) };
}




class StatsSummaryResponse {
    
    StatsSummaryResponse(this.yearMoveShares);

    List<YearMoverShares> yearMoveShares;
    

    StatsSummaryResponse.fromJson(Map<String, dynamic> json)
      : yearMoveShares = (json['yearMoveShares'] as List<dynamic>).map((val) =>  YearMoverShares.fromJson(val)).toList();

    Map<String, dynamic> toJson() => { 'yearMoveShares': yearMoveShares.map((val) => val.toJson()).toList() };
}




class StatusLocation implements GetLocation<StatusResponseDto> {
    String get path => 'api/status';
    StatusLocation();

    
    StatusResponseDto bodyFromGetJson(dynamic json) =>  StatusResponseDto.fromJson(json);

    StatusLocation.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class StatusResponseDto {
    
    StatusResponseDto(this.appMetrics, this.build, this.jvmMetrics);

    AppMetricsDto appMetrics;
                String build;
                Map<String, dynamic> jvmMetrics;
    

    StatusResponseDto.fromJson(Map<String, dynamic> json)
      : appMetrics =  AppMetricsDto.fromJson(json['appMetrics']),build = json['build'] as String,jvmMetrics = (json['jvmMetrics'] as Map<dynamic, dynamic>).map((key, value) => MapEntry(key as String, value as dynamic));

    Map<String, dynamic> toJson() => { 'appMetrics': appMetrics.toJson(),'build': build,'jvmMetrics': jvmMetrics.map((key, value) => MapEntry((key), (value))) };
}




class SymbolInfo implements GetLocation<SymbolInfoResponse> {
    String get path => Uri.parse('api/pricedata/symbolInfos').replace(queryParameters: {'symbols': symbols,}).toString();
    SymbolInfo(this.symbols);

    List<String> symbols;
    SymbolInfoResponse bodyFromGetJson(dynamic json) =>  SymbolInfoResponse.fromJson(json);

    SymbolInfo.fromJson(Map<String, dynamic> json)
      : symbols = (json['symbols'] as List<dynamic>).map((val) => val as String).toList();

    Map<String, dynamic> toJson() => { 'symbols': symbols.map((val) => val).toList() };
}




class SymbolInfoResponse {
    
    SymbolInfoResponse(this.companyInfos);

    Map<String, PdCompanyInfo> companyInfos;
    

    SymbolInfoResponse.fromJson(Map<String, dynamic> json)
      : companyInfos = (json['companyInfos'] as Map<dynamic, dynamic>).map((key, value) => MapEntry(key as String,  PdCompanyInfo.fromJson(value)));

    Map<String, dynamic> toJson() => { 'companyInfos': companyInfos.map((key, value) => MapEntry((key), (value.toJson()))) };
}




class SymbolSearch implements GetLocation<SymbolSearchResponse> {
    String get path => Uri.parse('api/pricedata/search').replace(queryParameters: {'query': query?.toString(),}).toString();
    SymbolSearch(this.query);

    String query;
    SymbolSearchResponse bodyFromGetJson(dynamic json) =>  SymbolSearchResponse.fromJson(json);

    SymbolSearch.fromJson(Map<String, dynamic> json)
      : query = json['query'] as String;

    Map<String, dynamic> toJson() => { 'query': query };
}




class SymbolSearchResponse {
    
    SymbolSearchResponse(this.snapshot);

    List<PdInstrument> snapshot;
    

    SymbolSearchResponse.fromJson(Map<String, dynamic> json)
      : snapshot = (json['snapshot'] as List<dynamic>).map((val) =>  PdInstrument.fromJson(val)).toList();

    Map<String, dynamic> toJson() => { 'snapshot': snapshot.map((val) => val.toJson()).toList() };
}




class TestMethodGetResponse {
    
    TestMethodGetResponse(this.tmp);

    String tmp;
    

    TestMethodGetResponse.fromJson(Map<String, dynamic> json)
      : tmp = json['tmp'] as String;

    Map<String, dynamic> toJson() => { 'tmp': tmp };
}




class TestMethodLocation implements GetLocation<TestMethodGetResponse>, PostBodyLocation<TestMethodPostRequest, TestMethodPostResponse>, PutBodyLocation<TestMethodPutRequest, TestMethodPutResponse> {
    String get path => 'api/test/method/{param}'.replaceAll('{param}', this.param);
    TestMethodLocation(this.param);

    String param;
    TestMethodGetResponse bodyFromGetJson(dynamic json) =>  TestMethodGetResponse.fromJson(json);
                TestMethodPostResponse bodyFromPostJson(dynamic json) =>  TestMethodPostResponse.fromJson(json);
                TestMethodPutResponse bodyFromPutJson(dynamic json) =>  TestMethodPutResponse.fromJson(json);

    TestMethodLocation.fromJson(Map<String, dynamic> json)
      : param = json['param'] as String;

    Map<String, dynamic> toJson() => { 'param': param };
}




class TestMethodPostRequest {
    
    TestMethodPostRequest(this.tmp);

    String tmp;
    

    TestMethodPostRequest.fromJson(Map<String, dynamic> json)
      : tmp = json['tmp'] as String;

    Map<String, dynamic> toJson() => { 'tmp': tmp };
}




class TestMethodPostResponse {
    
    TestMethodPostResponse(this.tmp);

    String tmp;
    

    TestMethodPostResponse.fromJson(Map<String, dynamic> json)
      : tmp = json['tmp'] as String;

    Map<String, dynamic> toJson() => { 'tmp': tmp };
}




class TestMethodPutRequest {
    
    TestMethodPutRequest(this.tmp);

    String tmp;
    

    TestMethodPutRequest.fromJson(Map<String, dynamic> json)
      : tmp = json['tmp'] as String;

    Map<String, dynamic> toJson() => { 'tmp': tmp };
}




class TestMethodPutResponse {
    
    TestMethodPutResponse(this.tmp);

    String tmp;
    

    TestMethodPutResponse.fromJson(Map<String, dynamic> json)
      : tmp = json['tmp'] as String;

    Map<String, dynamic> toJson() => { 'tmp': tmp };
}




class Transaction {
    
    Transaction(this.count, this.createdAt, this.id, this.instrument, this.label, this.transactionAt, this.type, this.values);

    double count;
                InstantWrapper createdAt;
                String id;
                Instrument instrument;
                Label label;
                InstantWrapper transactionAt;
                TransactionType type;
                List<TransactionValue> values;
    

    Transaction.fromJson(Map<String, dynamic> json)
      : count = (json['count'] as num).toDouble(),createdAt =  InstantWrapper.fromJson(json['createdAt']),id = json['id'] as String,instrument =  Instrument.fromJson(json['instrument']),label =  Label.fromJson(json['label']),transactionAt =  InstantWrapper.fromJson(json['transactionAt']),type = convertTransactionTypeFromJson(json['type'] as String),values = (json['values'] as List<dynamic>).map((val) =>  TransactionValue.fromJson(val)).toList();

    Map<String, dynamic> toJson() => { 'count': count,'createdAt': createdAt.toJson(),'id': id,'instrument': instrument.toJson(),'label': label.toJson(),'transactionAt': transactionAt.toJson(),'type': convertTransactionTypeToJson(type),'values': values.map((val) => val.toJson()).toList() };
}




class TransactionValue {
    
    TransactionValue(this.amount, this.currency, this.id, this.transaction, this.type);

    double amount;
                CurrencyInfo currency;
                String id;
                Transaction transaction;
                TransactionValueType type;
    

    TransactionValue.fromJson(Map<String, dynamic> json)
      : amount = (json['amount'] as num).toDouble(),currency =  CurrencyInfo.fromJson(json['currency']),id = json['id'] as String,transaction =  Transaction.fromJson(json['transaction']),type = convertTransactionValueTypeFromJson(json['type'] as String);

    Map<String, dynamic> toJson() => { 'amount': amount,'currency': currency.toJson(),'id': id,'transaction': transaction.toJson(),'type': convertTransactionValueTypeToJson(type) };
}




class URI {
    
    URI(this.scheme, this.fragment, this.authority, this.userInfo, this.host, this.port, this.path, this.query, this.schemeSpecificPart, this.hash, this.decodedUserInfo, this.decodedAuthority, this.decodedPath, this.decodedQuery, this.decodedFragment, this.decodedSchemeSpecificPart, this.string);

    String scheme;
                String fragment;
                String authority;
                String userInfo;
                String host;
                int port;
                String path;
                String query;
                String schemeSpecificPart;
                int hash;
                String decodedUserInfo;
                String decodedAuthority;
                String decodedPath;
                String decodedQuery;
                String decodedFragment;
                String decodedSchemeSpecificPart;
                String string;
    

    URI.fromJson(Map<String, dynamic> json)
      : scheme = json['scheme'] as String,fragment = json['fragment'] as String,authority = json['authority'] as String,userInfo = json['userInfo'] as String,host = json['host'] as String,port = json['port'] as int,path = json['path'] as String,query = json['query'] as String,schemeSpecificPart = json['schemeSpecificPart'] as String,hash = json['hash'] as int,decodedUserInfo = json['decodedUserInfo'] as String,decodedAuthority = json['decodedAuthority'] as String,decodedPath = json['decodedPath'] as String,decodedQuery = json['decodedQuery'] as String,decodedFragment = json['decodedFragment'] as String,decodedSchemeSpecificPart = json['decodedSchemeSpecificPart'] as String,string = json['string'] as String;

    Map<String, dynamic> toJson() => { 'scheme': scheme,'fragment': fragment,'authority': authority,'userInfo': userInfo,'host': host,'port': port,'path': path,'query': query,'schemeSpecificPart': schemeSpecificPart,'hash': hash,'decodedUserInfo': decodedUserInfo,'decodedAuthority': decodedAuthority,'decodedPath': decodedPath,'decodedQuery': decodedQuery,'decodedFragment': decodedFragment,'decodedSchemeSpecificPart': decodedSchemeSpecificPart,'string': string };
}




class URL {
    
    URL(this.protocol, this.host, this.port, this.file, this.query, this.authority, this.path, this.userInfo, this.ref, this.hostAddress, this.handler, this.hashCode, this.tempState);

    String protocol;
                String host;
                int port;
                String file;
                String query;
                String authority;
                String path;
                String userInfo;
                String ref;
                InetAddress hostAddress;
                URLStreamHandler handler;
                int hashCode;
                UrlDeserializedState tempState;
    

    URL.fromJson(Map<String, dynamic> json)
      : protocol = json['protocol'] as String,host = json['host'] as String,port = json['port'] as int,file = json['file'] as String,query = json['query'] as String,authority = json['authority'] as String,path = json['path'] as String,userInfo = json['userInfo'] as String,ref = json['ref'] as String,hostAddress =  InetAddress.fromJson(json['hostAddress']),handler =  URLStreamHandler.fromJson(json['handler']),hashCode = json['hashCode'] as int,tempState =  UrlDeserializedState.fromJson(json['tempState']);

    Map<String, dynamic> toJson() => { 'protocol': protocol,'host': host,'port': port,'file': file,'query': query,'authority': authority,'path': path,'userInfo': userInfo,'ref': ref,'hostAddress': hostAddress.toJson(),'handler': handler.toJson(),'hashCode': hashCode,'tempState': tempState.toJson() };
}




class URLStreamHandler {
    
    URLStreamHandler();

    
    

    URLStreamHandler.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class UpdateProfile implements PostBodyLocation<UpdateProfileBody, ContextDto> {
    String get path => 'api/auth/profile/update';
    UpdateProfile();

    
    ContextDto bodyFromPostJson(dynamic json) =>  ContextDto.fromJson(json);

    UpdateProfile.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class UpdateProfileBody {
    
    UpdateProfileBody(this.passwordChange);

    String passwordChange;
    

    UpdateProfileBody.fromJson(Map<String, dynamic> json)
      : passwordChange = json['passwordChange'] as String;

    Map<String, dynamic> toJson() => { 'passwordChange': passwordChange };
}




class UploadTransactionFile {
    String get path => 'api/portfolio/import/upload';
    UploadTransactionFile();

    
    

    UploadTransactionFile.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class UploadTransactionFileResponse {
    
    UploadTransactionFileResponse(this.availableImportFormats, this.importId);

    List<ImportTypeDto> availableImportFormats;
                String importId;
    

    UploadTransactionFileResponse.fromJson(Map<String, dynamic> json)
      : availableImportFormats = (json['availableImportFormats'] as List<dynamic>).map((val) =>  ImportTypeDto.fromJson(val)).toList(),importId = json['importId'] as String;

    Map<String, dynamic> toJson() => { 'availableImportFormats': availableImportFormats.map((val) => val.toJson()).toList(),'importId': importId };
}




class UrlDeserializedState {
    
    UrlDeserializedState(this.protocol, this.host, this.port, this.authority, this.file, this.ref, this.hashCode);

    String protocol;
                String host;
                int port;
                String authority;
                String file;
                String ref;
                int hashCode;
    

    UrlDeserializedState.fromJson(Map<String, dynamic> json)
      : protocol = json['protocol'] as String,host = json['host'] as String,port = json['port'] as int,authority = json['authority'] as String,file = json['file'] as String,ref = json['ref'] as String,hashCode = json['hashCode'] as int;

    Map<String, dynamic> toJson() => { 'protocol': protocol,'host': host,'port': port,'authority': authority,'file': file,'ref': ref,'hashCode': hashCode };
}




class UserAuthEmailToken {
    
    UserAuthEmailToken(this.createdAt, this.email, this.sentEmailAt, this.token, this.usedAt, this.user);

    InstantWrapper createdAt;
                String email;
                InstantWrapper sentEmailAt;
                String token;
                InstantWrapper usedAt;
                UserInfo user;
    

    UserAuthEmailToken.fromJson(Map<String, dynamic> json)
      : createdAt =  InstantWrapper.fromJson(json['createdAt']),email = json['email'] as String,sentEmailAt =  InstantWrapper.fromJson(json['sentEmailAt']),token = json['token'] as String,usedAt =  InstantWrapper.fromJson(json['usedAt']),user =  UserInfo.fromJson(json['user']);

    Map<String, dynamic> toJson() => { 'createdAt': createdAt.toJson(),'email': email,'sentEmailAt': sentEmailAt.toJson(),'token': token,'usedAt': usedAt.toJson(),'user': user.toJson() };
}




class UserInfo {
    
    UserInfo(this.authTokens, this.createdAt, this.displayName, this.email, this.firstName, this.id, this.lastName, this.passwordHash, this.phoneNumber, this.userType);

    List<UserAuthEmailToken> authTokens;
                InstantWrapper createdAt;
                String displayName;
                String email;
                String firstName;
                String id;
                String lastName;
                String passwordHash;
                String phoneNumber;
                UserType userType;
    

    UserInfo.fromJson(Map<String, dynamic> json)
      : authTokens = (json['authTokens'] as List<dynamic>).map((val) =>  UserAuthEmailToken.fromJson(val)).toList(),createdAt =  InstantWrapper.fromJson(json['createdAt']),displayName = json['displayName'] as String,email = json['email'] as String,firstName = json['firstName'] as String,id = json['id'] as String,lastName = json['lastName'] as String,passwordHash = json['passwordHash'] as String,phoneNumber = json['phoneNumber'] as String,userType = convertUserTypeFromJson(json['userType'] as String);

    Map<String, dynamic> toJson() => { 'authTokens': authTokens.map((val) => val.toJson()).toList(),'createdAt': createdAt.toJson(),'displayName': displayName,'email': email,'firstName': firstName,'id': id,'lastName': lastName,'passwordHash': passwordHash,'phoneNumber': phoneNumber,'userType': convertUserTypeToJson(userType) };
}




class UserInfoAvatarUpload implements PostBodyLocation<Unit, UserInfoResponse> {
    String get path => 'api/game/userInfo/upload';
    UserInfoAvatarUpload();

    
    UserInfoResponse bodyFromPostJson(dynamic json) =>  UserInfoResponse.fromJson(json);

    UserInfoAvatarUpload.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class UserInfoLocation implements PostBodyLocation<UserInfoRequest, UserInfoResponse> {
    String get path => 'api/game/userInfo';
    UserInfoLocation();

    
    UserInfoResponse bodyFromPostJson(dynamic json) =>  UserInfoResponse.fromJson(json);

    UserInfoLocation.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class UserInfoRequest {
    
    UserInfoRequest(this.appVersion, this.deviceInfo, this.fcmToken);

    String appVersion;
                String deviceInfo;
                String fcmToken;
    

    UserInfoRequest.fromJson(Map<String, dynamic> json)
      : appVersion = json['appVersion'] as String,deviceInfo = json['deviceInfo'] as String,fcmToken = json['fcmToken'] as String;

    Map<String, dynamic> toJson() => { 'appVersion': appVersion,'deviceInfo': deviceInfo,'fcmToken': fcmToken };
}




class UserInfoResponse {
    
    UserInfoResponse(this.avatarUrl, this.createdAt, this.displayName, this.email, this.key, this.statsCorrectAnswers, this.statsTotalTurns);

    String avatarUrl;
                InstantWrapper createdAt;
                String displayName;
                String email;
                String key;
                int statsCorrectAnswers;
                int statsTotalTurns;
    

    UserInfoResponse.fromJson(Map<String, dynamic> json)
      : avatarUrl = json['avatarUrl'] as String,createdAt =  InstantWrapper.fromJson(json['createdAt']),displayName = json['displayName'] as String,email = json['email'] as String,key = json['key'] as String,statsCorrectAnswers = json['statsCorrectAnswers'] as int,statsTotalTurns = json['statsTotalTurns'] as int;

    Map<String, dynamic> toJson() => { 'avatarUrl': avatarUrl,'createdAt': createdAt.toJson(),'displayName': displayName,'email': email,'key': key,'statsCorrectAnswers': statsCorrectAnswers,'statsTotalTurns': statsTotalTurns };
}




class UserInfoUpdateLocation implements PostBodyLocation<UserInfoUpdateRequest, UserInfoResponse> {
    String get path => 'api/game/userInfo/update';
    UserInfoUpdateLocation();

    
    UserInfoResponse bodyFromPostJson(dynamic json) =>  UserInfoResponse.fromJson(json);

    UserInfoUpdateLocation.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class UserInfoUpdateRequest {
    
    UserInfoUpdateRequest(this.displayName, this.email);

    String displayName;
                String email;
    

    UserInfoUpdateRequest.fromJson(Map<String, dynamic> json)
      : displayName = json['displayName'] as String,email = json['email'] as String;

    Map<String, dynamic> toJson() => { 'displayName': displayName,'email': email };
}




class VerifyToken implements PostBodyLocation<VerifyTokenRequest, ContextDto> {
    String get path => 'api/auth/verifyToken';
    VerifyToken();

    
    ContextDto bodyFromPostJson(dynamic json) =>  ContextDto.fromJson(json);

    VerifyToken.fromJson(Map<String, dynamic> json)
      : super();

    Map<String, dynamic> toJson() => {  };
}




class VerifyTokenRequest {
    
    VerifyTokenRequest(this.emailToken);

    String emailToken;
    

    VerifyTokenRequest.fromJson(Map<String, dynamic> json)
      : emailToken = json['emailToken'] as String;

    Map<String, dynamic> toJson() => { 'emailToken': emailToken };
}




class WDCompanyInfoDto {
    
    WDCompanyInfoDto(this.companyDescription, this.companyLabel, this.industry, this.industryLabel, this.logo, this.tickerSymbol, this.website, this.wikidataEntityUri, this.wikipediaArticleUri);

    String companyDescription;
                String companyLabel;
                URI industry;
                String industryLabel;
                URL logo;
                String tickerSymbol;
                URL website;
                String wikidataEntityUri;
                String wikipediaArticleUri;
    

    WDCompanyInfoDto.fromJson(Map<String, dynamic> json)
      : companyDescription = json['companyDescription'] as String,companyLabel = json['companyLabel'] as String,industry = json['industry'] == null ? null :  URI.fromJson(json['industry']),industryLabel = json['industryLabel'] as String,logo =  URL.fromJson(json['logo']),tickerSymbol = json['tickerSymbol'] as String,website =  URL.fromJson(json['website']),wikidataEntityUri = json['wikidataEntityUri'] as String,wikipediaArticleUri = json['wikipediaArticleUri'] as String;

    Map<String, dynamic> toJson() => { 'companyDescription': companyDescription,'companyLabel': companyLabel,'industry': industry.toJson(),'industryLabel': industryLabel,'logo': logo.toJson(),'tickerSymbol': tickerSymbol,'website': website.toJson(),'wikidataEntityUri': wikidataEntityUri,'wikipediaArticleUri': wikipediaArticleUri };
}




class YearMoverShares {
    
    YearMoverShares(this.companyLabel, this.companyWebsite, this.instrumentId, this.instrumentSymbol, this.marketCap, this.volume, this.weekMoveDay, this.weekMoveValue, this.yearMoveDay, this.yearMoveValue);

    String companyLabel;
                String companyWebsite;
                String instrumentId;
                String instrumentSymbol;
                double marketCap;
                double volume;
                /* yyyy-mm-dd date LocalDate */String weekMoveDay;
                double weekMoveValue;
                /* yyyy-mm-dd date LocalDate */String yearMoveDay;
                double yearMoveValue;
    

    YearMoverShares.fromJson(Map<String, dynamic> json)
      : companyLabel = json['companyLabel'] as String,companyWebsite = json['companyWebsite'] as String,instrumentId = json['instrumentId'] as String,instrumentSymbol = json['instrumentSymbol'] as String,marketCap = (json['marketCap'] as num).toDouble(),volume = (json['volume'] as num).toDouble(),weekMoveDay = json['weekMoveDay'] as /* yyyy-mm-dd date LocalDate */String,weekMoveValue = (json['weekMoveValue'] as num).toDouble(),yearMoveDay = json['yearMoveDay'] as /* yyyy-mm-dd date LocalDate */String,yearMoveValue = (json['yearMoveValue'] as num).toDouble();

    Map<String, dynamic> toJson() => { 'companyLabel': companyLabel,'companyWebsite': companyWebsite,'instrumentId': instrumentId,'instrumentSymbol': instrumentSymbol,'marketCap': marketCap,'volume': volume,'weekMoveDay': weekMoveDay,'weekMoveValue': weekMoveValue,'yearMoveDay': yearMoveDay,'yearMoveValue': yearMoveValue };
}

        
